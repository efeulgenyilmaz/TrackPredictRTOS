Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 67.21      2.46     2.46                             main
  7.92      2.75     0.29       76     3.82     9.74  malloc_and_format()
  4.37      2.91     0.16 23355453     0.00     0.00  cv::Matx<unsigned char, 3, 1>::Matx(unsigned char const*)
  3.83      3.05     0.14 69978186     0.00     0.00  cv::Vec<unsigned char, 3>::operator[](int)
  2.87      3.15     0.10  8974986     0.00     0.00  set_pixel_color(sf::RenderWindow&, int, int, int)
  2.73      3.25     0.10       75     1.33    11.60  calculateRedCentroid(int, int, n*, bool*)
  2.60      3.35     0.10        1    95.00   269.95  SFML_out(sf::RenderWindow&, sf::Font&)
  2.19      3.43     0.08 23343273     0.00     0.00  cv::Vec<unsigned char, 3>& cv::Mat::at<cv::Vec<unsigned char, 3> >(int, int)
  1.91      3.50     0.07 23340418     0.00     0.00  cv::Vec<unsigned char, 3>::Vec(cv::Vec<unsigned char, 3> const&)
  1.37      3.55     0.05  8539989     0.00     0.00  sf::Vector2<float>::Vector2(float, float)
  1.09      3.59     0.04                             _init
  0.82      3.62     0.03 23290326     0.00     0.00  isRedPixel(RGBPixel)
  0.55      3.64     0.02                             std::chrono::duration<long, std::ratio<1l, 1l> >::duration<int, void>(int const&)
  0.27      3.65     0.01    34773     0.00     0.00  std::__cxx11::basic_string<unsigned int, std::char_traits<unsigned int>, std::allocator<unsigned int> >::_Alloc_hider::~_Alloc_hider()
  0.14      3.65     0.01    18006     0.00     0.00  __gthread_mutex_unlock(pthread_mutex_t*)
  0.14      3.66     0.01    17892     0.00     0.00  std::__cxx11::to_string(double)
  0.00      3.66     0.00    71356     0.00     0.00  std::__cxx11::basic_string<unsigned int, std::char_traits<unsigned int>, std::allocator<unsigned int> >::_M_data() const
  0.00      3.66     0.00    53578     0.00     0.00  sf::Drawable::~Drawable()
  0.00      3.66     0.00    36216     0.00     0.00  sf::String::~String()
  0.00      3.66     0.00    35974     0.00     0.00  __gthread_active_p()
  0.00      3.66     0.00    35961     0.00     0.00  std::_Vector_base<sf::Vertex, std::allocator<sf::Vertex> >::_Vector_impl::~_Vector_impl()
  0.00      3.66     0.00    35932     0.00     0.00  unsigned int const* std::__addressof<unsigned int const>(unsigned int const&)
  0.00      3.66     0.00    35862     0.00     0.00  unsigned int const* std::addressof<unsigned int const>(unsigned int const&)
  0.00      3.66     0.00    35825     0.00     0.00  std::__cxx11::basic_string<unsigned int, std::char_traits<unsigned int>, std::allocator<unsigned int> >::_M_get_allocator()
  0.00      3.66     0.00    35790     0.00     0.00  std::_Vector_base<sf::Vertex, std::allocator<sf::Vertex> >::_M_deallocate(sf::Vertex*, unsigned long)
  0.00      3.66     0.00    35753     0.00     0.00  std::_Vector_base<sf::Vertex, std::allocator<sf::Vertex> >::~_Vector_base()
  0.00      3.66     0.00    35747     0.00     0.00  std::__cxx11::basic_string<unsigned int, std::char_traits<unsigned int>, std::allocator<unsigned int> >::_M_destroy(unsigned long)
  0.00      3.66     0.00    35705     0.00     0.00  std::__cxx11::basic_string<unsigned int, std::char_traits<unsigned int>, std::allocator<unsigned int> >::_M_local_data() const
  0.00      3.66     0.00    35685     0.00     0.00  std::__ptr_traits_ptr_to<unsigned int const*, unsigned int const, false>::pointer_to(unsigned int const&)
  0.00      3.66     0.00    35682     0.00     0.00  std::__cxx11::basic_string<unsigned int, std::char_traits<unsigned int>, std::allocator<unsigned int> >::_M_is_local() const
  0.00      3.66     0.00    35682     0.00     0.00  std::__cxx11::basic_string<unsigned int, std::char_traits<unsigned int>, std::allocator<unsigned int> >::~basic_string()
  0.00      3.66     0.00    35661     0.00     0.00  std::__new_allocator<unsigned int>::deallocate(unsigned int*, unsigned long)
  0.00      3.66     0.00    35660     0.00     0.00  std::__cxx11::basic_string<unsigned int, std::char_traits<unsigned int>, std::allocator<unsigned int> >::_M_dispose()
  0.00      3.66     0.00    35626     0.00     0.00  std::_Vector_base<sf::Vertex, std::allocator<sf::Vertex> >::_M_get_Tp_allocator()
  0.00      3.66     0.00    35507     0.00     0.00  void std::_Destroy_aux<true>::__destroy<sf::Vertex*>(sf::Vertex*, sf::Vertex*)
  0.00      3.66     0.00    35485     0.00     0.00  void std::_Destroy<sf::Vertex*>(sf::Vertex*, sf::Vertex*)
  0.00      3.66     0.00    35484     0.00     0.00  std::__new_allocator<sf::Vertex>::~__new_allocator()
  0.00      3.66     0.00    35483     0.00     0.00  std::vector<sf::Vertex, std::allocator<sf::Vertex> >::~vector()
  0.00      3.66     0.00    35255     0.00     0.00  sf::VertexArray::~VertexArray()
  0.00      3.66     0.00    34596     0.00     0.00  std::__new_allocator<unsigned int>::~__new_allocator()
  0.00      3.66     0.00    18484     0.00     0.00  std::mutex::lock()
  0.00      3.66     0.00    18409     0.00     0.00  std::mutex::unlock()
  0.00      3.66     0.00    18069     0.00     0.00  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char*, void>(char*, char*, std::allocator<char> const&)
  0.00      3.66     0.00    18042     0.00     0.00  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)::_Guard::~_Guard()
  0.00      3.66     0.00    17941     0.00     0.00  void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)
  0.00      3.66     0.00    17910     0.00     0.00  __gthread_mutex_lock(pthread_mutex_t*)
  0.00      3.66     0.00    17764     0.00     0.00  std::__new_allocator<sf::Vertex>::deallocate(sf::Vertex*, unsigned long)
  0.00      3.66     0.00    17736     0.00     0.00  std::__new_allocator<char>::~__new_allocator()
  0.00      3.66     0.00    17658     0.00     0.00  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)::_Guard::_Guard(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)
  0.00      3.66     0.00    17562     0.00     0.00  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...)
  0.00      3.66     0.00    17535     0.00     0.00  sf::Text::~Text()
  0.00      3.66     0.00     1251     0.00     0.00  std::chrono::duration<long, std::ratio<1l, 1000l> >::count() const
  0.00      3.66     0.00      607     0.00     0.00  __gnu_cxx::__promote_2<int, int, __gnu_cxx::__promote<int, std::__is_integer<int>::__value>::__type, __gnu_cxx::__promote<int, std::__is_integer<int>::__value>::__type>::__type std::pow<int, int>(int, int)
  0.00      3.66     0.00      534     0.00     0.00  std::chrono::duration<long, std::ratio<1l, 1000l> >::duration<long, void>(long const&)
  0.00      3.66     0.00      359     0.00     0.00  std::chrono::duration<long, std::ratio<1l, 1l> >::count() const
  0.00      3.66     0.00      181     0.00     0.00  std::enable_if<std::chrono::__is_duration<std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::value, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::duration_cast<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&)
  0.00      3.66     0.00      181     0.00     0.00  std::chrono::duration<long, std::ratio<1l, 1000l> >::duration<long, std::ratio<1l, 1l>, void>(std::chrono::duration<long, std::ratio<1l, 1l> > const&)
  0.00      3.66     0.00      181     0.00     0.00  std::chrono::duration<long, std::ratio<1l, 1000l> >::duration<int, void>(int const&)
  0.00      3.66     0.00      181     0.00     0.00  std::common_type<std::chrono::duration<long, std::ratio<1l, 1000l> >, std::chrono::duration<long, std::ratio<1l, 1l> > >::type std::chrono::operator-<long, std::ratio<1l, 1000l>, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&, std::chrono::duration<long, std::ratio<1l, 1l> > const&)
  0.00      3.66     0.00      180     0.00     0.00  std::enable_if<std::chrono::__is_duration<std::chrono::duration<long, std::ratio<1l, 1000l> > >::value, std::chrono::duration<long, std::ratio<1l, 1000l> > >::type std::chrono::duration_cast<std::chrono::duration<long, std::ratio<1l, 1000l> >, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)
  0.00      3.66     0.00      180     0.00     0.00  std::enable_if<std::chrono::__is_duration<std::chrono::duration<long, std::ratio<1l, 1l> > >::value, std::chrono::duration<long, std::ratio<1l, 1l> > >::type std::chrono::duration_cast<std::chrono::duration<long, std::ratio<1l, 1l> >, long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&)
  0.00      3.66     0.00      180     0.00     0.00  std::chrono::duration_values<long>::zero()
  0.00      3.66     0.00      180     0.00     0.00  std::chrono::duration<long, std::ratio<1l, 1000000000l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::ratio<1000000l, 1l>, long, false, true>::__cast<long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&)
  0.00      3.66     0.00      180     0.00     0.00  std::chrono::duration<long, std::ratio<1l, 1000l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1000l> >, std::ratio<1000l, 1l>, long, false, true>::__cast<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)
  0.00      3.66     0.00      180     0.00     0.00  std::chrono::duration<long, std::ratio<1l, 1000000000l> >::duration<long, void>(long const&)
  0.00      3.66     0.00      179     0.00     0.00  void std::this_thread::sleep_for<long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&)
  0.00      3.66     0.00      179     0.00     0.00  std::chrono::duration<long, std::ratio<1l, 1000l> >::zero()
  0.00      3.66     0.00      178     0.00     0.00  std::chrono::duration<long, std::ratio<1l, 1l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1l> >, std::ratio<1l, 1000l>, long, true, false>::__cast<long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&)
  0.00      3.66     0.00      178     0.00     0.00  std::chrono::duration<long, std::ratio<1l, 1l> >::duration<long, void>(long const&)
  0.00      3.66     0.00      178     0.00     0.00  bool std::chrono::operator< <long, std::ratio<1l, 1000l>, long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&, std::chrono::duration<long, std::ratio<1l, 1000l> > const&)
  0.00      3.66     0.00      177     0.00     0.00  std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const
  0.00      3.66     0.00      176     0.00     0.00  bool std::chrono::operator<=<long, std::ratio<1l, 1000l>, long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&, std::chrono::duration<long, std::ratio<1l, 1000l> > const&)
  0.00      3.66     0.00       75     0.00     0.00  capture_frame(cv::VideoCapture&)
  0.00      3.66     0.00       44     0.00     0.00  add(n*, int, int, double)
  0.00      3.66     0.00       44     0.00     0.00  show(n*)
  0.00      3.66     0.00       10     0.00     0.00  std::reference_wrapper<std::mutex>&& std::forward<std::reference_wrapper<std::mutex> >(std::remove_reference<std::reference_wrapper<std::mutex> >::type&)
  0.00      3.66     0.00        9     0.00     0.00  main::{lambda()#1}&& std::forward<main::{lambda()#1}>(std::remove_reference<main::{lambda()#1}>::type&)
  0.00      3.66     0.00        5     0.00     0.00  void (&std::forward<void (&)(std::mutex&)>(std::remove_reference<void (&)(std::mutex&)>::type&))(std::mutex&)
  0.00      3.66     0.00        4     0.00     0.00  std::_Head_base<0ul, std::thread::_State*, false>::_M_head(std::_Head_base<0ul, std::thread::_State*, false>&)
  0.00      3.66     0.00        4     0.00     0.00  std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >::_M_head(std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >&)
  0.00      3.66     0.00        4     0.00     0.00  std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::_M_ptr()
  0.00      3.66     0.00        4     0.00     0.00  std::thread::id::id()
  0.00      3.66     0.00        4     0.00     0.00  std::thread::_State*& std::__get_helper<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >(std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >&)
  0.00      3.66     0.00        4     0.00     0.00  std::tuple_element<0ul, std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> > >::type& std::get<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >(std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> >&)
  0.00      3.66     0.00        3     0.00     0.00  void (*&&std::forward<void (*)(std::mutex&)>(std::remove_reference<void (*)(std::mutex&)>::type&))(std::mutex&)
  0.00      3.66     0.00        2     0.00     0.00  std::thread::joinable() const
  0.00      3.66     0.00        2     0.00     0.00  std::_Head_base<0ul, std::thread::_State*, false>::_Head_base()
  0.00      3.66     0.00        2     0.00     0.00  std::_Head_base<1ul, std::default_delete<std::thread::_State>, true>::_Head_base()
  0.00      3.66     0.00        2     0.00     0.00  std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::unique_ptr<std::default_delete<std::thread::_State>, void>(std::thread::_State*)
  0.00      3.66     0.00        2     0.00     0.00  std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::~unique_ptr()
  0.00      3.66     0.00        2     0.00     0.00  std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >::_Tuple_impl()
  0.00      3.66     0.00        2     0.00     0.00  std::_Tuple_impl<1ul, std::default_delete<std::thread::_State> >::_Tuple_impl()
  0.00      3.66     0.00        2     0.00     0.00  std::__uniq_ptr_data<std::thread::_State, std::default_delete<std::thread::_State>, true, true>::__uniq_ptr_impl(std::thread::_State*)
  0.00      3.66     0.00        2     0.00     0.00  std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::__uniq_ptr_impl(std::thread::_State*)
  0.00      3.66     0.00        2     0.00     0.00  std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> >::tuple<true, true>()
  0.00      3.66     0.00        2     0.00     0.00  std::thread::_State::_State()
  0.00      3.66     0.00        2     0.00     0.00  std::thread::~thread()
  0.00      3.66     0.00        2     0.00     0.00  std::remove_reference<std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> >&>::type&& std::move<std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> >&>(std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> >&)
  0.00      3.66     0.00        2     0.00     0.00  std::operator==(std::thread::id, std::thread::id)
  0.00      3.66     0.00        1     0.00     0.00  check_args(int, char**)
  0.00      3.66     0.00        1     0.00     0.03  calculateConfidence(std::mutex&)
  0.00      3.66     0.00        1     0.00     0.00  keep_the_camera_open()
  0.00      3.66     0.00        1     0.00     0.00  __static_initialization_and_destruction_0()
  0.00      3.66     0.00        1     0.00     0.00  test()
  0.00      3.66     0.00        1     0.00     0.00  sf::ContextSettings::ContextSettings(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)
  0.00      3.66     0.00        1     0.00     0.00  std::reference_wrapper<std::mutex>::get() const
  0.00      3.66     0.00        1     0.00     0.00  std::reference_wrapper<std::mutex>::operator std::mutex&() const
  0.00      3.66     0.00        1     0.00     0.00  std::_Head_base<0ul, void (*)(std::mutex&), false>::_M_head(std::_Head_base<0ul, void (*)(std::mutex&), false>&)
  0.00      3.66     0.00        1     0.00     0.00  std::_Head_base<0ul, void (*)(std::mutex&), false>::_Head_base(void (* const&)(std::mutex&))
  0.00      3.66     0.00        1     0.00     0.00  std::_Head_base<0ul, main::{lambda()#1}, false>::_M_head(std::_Head_base<0ul, main::{lambda()#1}, false>&)
  0.00      3.66     0.00        1     0.00     0.00  std::_Head_base<0ul, main::{lambda()#1}, false>::_Head_base<main::{lambda()#1}>(main::{lambda()#1}&&)
  0.00      3.66     0.00        1     0.00     0.00  std::_Head_base<1ul, std::reference_wrapper<std::mutex>, false>::_M_head(std::_Head_base<1ul, std::reference_wrapper<std::mutex>, false>&)
  0.00      3.66     0.00        1     0.00     0.00  std::_Head_base<1ul, std::reference_wrapper<std::mutex>, false>::_Head_base<std::reference_wrapper<std::mutex> >(std::reference_wrapper<std::mutex>&&)
  0.00      3.66     0.00        1     0.00     0.00  std::_Tuple_impl<0ul, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >::_M_head(std::_Tuple_impl<0ul, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >&)
  0.00      3.66     0.00        1     0.00     0.00  std::_Tuple_impl<0ul, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >::_Tuple_impl<void (&)(std::mutex&), std::reference_wrapper<std::mutex>, void>(void (&)(std::mutex&), std::reference_wrapper<std::mutex>&&)
  0.00      3.66     0.00        1     0.00     0.00  std::_Tuple_impl<0ul, main::{lambda()#1}>::_M_head(std::_Tuple_impl<0ul, main::{lambda()#1}>&)
  0.00      3.66     0.00        1     0.00     0.00  std::_Tuple_impl<0ul, main::{lambda()#1}>::_Tuple_impl<main::{lambda()#1}>(main::{lambda()#1}&&)
  0.00      3.66     0.00        1     0.00     0.00  std::_Tuple_impl<1ul, std::reference_wrapper<std::mutex> >::_M_head(std::_Tuple_impl<1ul, std::reference_wrapper<std::mutex> >&)
  0.00      3.66     0.00        1     0.00     0.00  std::_Tuple_impl<1ul, std::reference_wrapper<std::mutex> >::_Tuple_impl<std::reference_wrapper<std::mutex> >(std::reference_wrapper<std::mutex>&&)
  0.00      3.66     0.00        1     0.00     0.00  std::reference_wrapper<std::mutex>::_S_fun(std::mutex&)
  0.00      3.66     0.00        1     0.00     0.00  std::reference_wrapper<std::mutex>::reference_wrapper<std::mutex&, void, std::mutex*>(std::mutex&)
  0.00      3.66     0.00        1     0.00     0.00  std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> >::tuple<void (&)(std::mutex&), std::reference_wrapper<std::mutex>, true>(void (&)(std::mutex&), std::reference_wrapper<std::mutex>&&)
  0.00      3.66     0.00        1     0.00     0.00  std::tuple<main::{lambda()#1}>::tuple<main::{lambda()#1}, true, true>(main::{lambda()#1}&&)
  0.00      3.66     0.00        1     0.00     0.00  std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> > > >::_State_impl<void (&)(std::mutex&), std::reference_wrapper<std::mutex> >(void (&)(std::mutex&), std::reference_wrapper<std::mutex>&&)
  0.00      3.66     0.00        1     0.00     0.00  std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> > > >::~_State_impl()
  0.00      3.66     0.00        1     0.00     0.00  std::thread::_State_impl<std::thread::_Invoker<std::tuple<main::{lambda()#1}> > >::_State_impl<main::{lambda()#1}>(main::{lambda()#1}&&)
  0.00      3.66     0.00        1     0.00     0.00  std::thread::_State_impl<std::thread::_Invoker<std::tuple<main::{lambda()#1}> > >::~_State_impl()
  0.00      3.66     0.00        1     0.00     0.03  void std::thread::_Invoker<std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> > >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>)
  0.00      3.66     0.00        1     0.00     0.00  std::thread::_Invoker<std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> > >::_Invoker<void (&)(std::mutex&), std::reference_wrapper<std::mutex> >(void (&)(std::mutex&), std::reference_wrapper<std::mutex>&&)
  0.00      3.66     0.00        1     0.00     0.03  std::thread::_Invoker<std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> > >::operator()()
  0.00      3.66     0.00        1     0.00   870.02  void std::thread::_Invoker<std::tuple<main::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)
  0.00      3.66     0.00        1     0.00     0.00  std::thread::_Invoker<std::tuple<main::{lambda()#1}> >::_Invoker<main::{lambda()#1}>(main::{lambda()#1}&&)
  0.00      3.66     0.00        1     0.00   870.02  std::thread::_Invoker<std::tuple<main::{lambda()#1}> >::operator()()
  0.00      3.66     0.00        1     0.00     0.00  std::thread::thread<void (&)(std::mutex&), std::reference_wrapper<std::mutex>, void>(void (&)(std::mutex&), std::reference_wrapper<std::mutex>&&)
  0.00      3.66     0.00        1     0.00     0.00  std::thread::thread<main::{lambda()#1}, , void>(main::{lambda()#1}&&)
  0.00      3.66     0.00        1     0.00     0.00  std::mutex* std::__addressof<std::mutex>(std::mutex&)
  0.00      3.66     0.00        1     0.00     0.00  void (*&std::__get_helper<0ul, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >(std::_Tuple_impl<0ul, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >&))(std::mutex&)
  0.00      3.66     0.00        1     0.00     0.00  main::{lambda()#1}& std::__get_helper<0ul, main::{lambda()#1}>(std::_Tuple_impl<0ul, main::{lambda()#1}>&)
  0.00      3.66     0.00        1     0.00     0.00  std::reference_wrapper<std::mutex>& std::__get_helper<1ul, std::reference_wrapper<std::mutex>>(std::_Tuple_impl<1ul, std::reference_wrapper<std::mutex>>&)
  0.00      3.66     0.00        1     0.00     0.03  void std::__invoke_impl<void, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >(std::__invoke_other, void (*&&)(std::mutex&), std::reference_wrapper<std::mutex>&&)
  0.00      3.66     0.00        1     0.00   870.02  void std::__invoke_impl<void, main::{lambda()#1}>(std::__invoke_other, main::{lambda()#1}&&)
  0.00      3.66     0.00        1     0.00     0.00  std::tuple_element<0ul, std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> > >::type&& std::get<0ul, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >(std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> >&&)
  0.00      3.66     0.00        1     0.00     0.00  std::tuple_element<0ul, std::tuple<main::{lambda()#1}> >::type&& std::get<0ul, main::{lambda()#1}>(std::tuple<main::{lambda()#1}>&&)
  0.00      3.66     0.00        1     0.00     0.00  std::tuple_element<1ul, std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> > >::type&& std::get<1ul, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >(std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> >&&)
  0.00      3.66     0.00        1     0.00     0.00  std::reference_wrapper<std::mutex> std::ref<std::mutex>(std::mutex&)
  0.00      3.66     0.00        1     0.00     0.00  std::remove_reference<std::tuple<main::{lambda()#1}>&>::type&& std::move<std::tuple<main::{lambda()#1}>&>(std::tuple<main::{lambda()#1}>&)
  0.00      3.66     0.00        1     0.00     0.00  std::mutex& std::forward<std::mutex&>(std::remove_reference<std::mutex&>::type&)
  0.00      3.66     0.00        1     0.00     0.03  std::__invoke_result<void (*)(std::mutex&), std::reference_wrapper<std::mutex> >::type std::__invoke<void (*)(std::mutex&), std::reference_wrapper<std::mutex> >(void (*&&)(std::mutex&), std::reference_wrapper<std::mutex>&&)
  0.00      3.66     0.00        1     0.00   870.02  std::__invoke_result<main::{lambda()#1}>::type std::__invoke<main::{lambda()#1}>(main::{lambda()#1}&&)
  0.00      3.66     0.00        1     0.00   870.02  main::{lambda()#1}::operator()() const

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2023 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 4 byte(s) for 0.27% of 3.66 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     74.6    2.46    0.27                 main [1]
                0.10    0.17       1/1           SFML_out(sf::RenderWindow&, sf::Font&) [10]
                0.00    0.00       1/36216       sf::String::~String() [20]
                0.00    0.00       1/18409       std::mutex::unlock() [23]
                0.00    0.00       2/2           std::thread::~thread() [115]
                0.00    0.00       1/1           test() [121]
                0.00    0.00       1/1           sf::ContextSettings::ContextSettings(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool) [122]
                0.00    0.00       1/17736       std::__new_allocator<char>::~__new_allocator() [67]
                0.00    0.00       1/1           check_args(int, char**) [118]
                0.00    0.00       1/18484       std::mutex::lock() [61]
                0.00    0.00       1/44          add(n*, int, int, double) [92]
                0.00    0.00       1/44          show(n*) [93]
                0.00    0.00       1/1           keep_the_camera_open() [119]
                0.00    0.00       1/1           std::thread::thread<main::{lambda()#1}, , void>(main::{lambda()#1}&&) [148]
                0.00    0.00       1/1           std::reference_wrapper<std::mutex> std::ref<std::mutex>(std::mutex&) [156]
                0.00    0.00       1/1           std::thread::thread<void (&)(std::mutex&), std::reference_wrapper<std::mutex>, void>(void (&)(std::mutex&), std::reference_wrapper<std::mutex>&&) [147]
-----------------------------------------------
                0.00    0.87       1/1           std::thread::_Invoker<std::tuple<main::{lambda()#1}> >::operator()() [3]
[2]     23.8    0.00    0.87       1         void std::thread::_Invoker<std::tuple<main::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) [2]
                0.00    0.87       1/1           std::__invoke_result<main::{lambda()#1}>::type std::__invoke<main::{lambda()#1}>(main::{lambda()#1}&&) [5]
                0.00    0.00       1/1           std::remove_reference<std::tuple<main::{lambda()#1}>&>::type&& std::move<std::tuple<main::{lambda()#1}>&>(std::tuple<main::{lambda()#1}>&) [157]
                0.00    0.00       1/1           std::tuple_element<0ul, std::tuple<main::{lambda()#1}> >::type&& std::get<0ul, main::{lambda()#1}>(std::tuple<main::{lambda()#1}>&&) [154]
-----------------------------------------------
                0.00    0.87       1/1           std::thread::_State_impl<std::thread::_Invoker<std::tuple<main::{lambda()#1}> > >::_M_run() [7]
[3]     23.8    0.00    0.87       1         std::thread::_Invoker<std::tuple<main::{lambda()#1}> >::operator()() [3]
                0.00    0.87       1/1           void std::thread::_Invoker<std::tuple<main::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) [2]
-----------------------------------------------
                0.00    0.87       1/1           std::__invoke_result<main::{lambda()#1}>::type std::__invoke<main::{lambda()#1}>(main::{lambda()#1}&&) [5]
[4]     23.8    0.00    0.87       1         void std::__invoke_impl<void, main::{lambda()#1}>(std::__invoke_other, main::{lambda()#1}&&) [4]
                0.00    0.87       1/1           main::{lambda()#1}::operator()() const [6]
                0.00    0.00       1/9           main::{lambda()#1}&& std::forward<main::{lambda()#1}>(std::remove_reference<main::{lambda()#1}>::type&) [95]
-----------------------------------------------
                0.00    0.87       1/1           void std::thread::_Invoker<std::tuple<main::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) [2]
[5]     23.8    0.00    0.87       1         std::__invoke_result<main::{lambda()#1}>::type std::__invoke<main::{lambda()#1}>(main::{lambda()#1}&&) [5]
                0.00    0.87       1/1           void std::__invoke_impl<void, main::{lambda()#1}>(std::__invoke_other, main::{lambda()#1}&&) [4]
                0.00    0.00       1/9           main::{lambda()#1}&& std::forward<main::{lambda()#1}>(std::remove_reference<main::{lambda()#1}>::type&) [95]
-----------------------------------------------
                0.00    0.87       1/1           void std::__invoke_impl<void, main::{lambda()#1}>(std::__invoke_other, main::{lambda()#1}&&) [4]
[6]     23.8    0.00    0.87       1         main::{lambda()#1}::operator()() const [6]
                0.10    0.77      75/75          calculateRedCentroid(int, int, n*, bool*) [8]
                0.00    0.00      77/18409       std::mutex::unlock() [23]
                0.00    0.00      77/181         std::chrono::duration<long, std::ratio<1l, 1000l> >::duration<int, void>(int const&) [76]
                0.00    0.00      76/179         void std::this_thread::sleep_for<long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&) [84]
                0.00    0.00      75/18484       std::mutex::lock() [61]
-----------------------------------------------
                                                 <spontaneous>
[7]     23.8    0.00    0.87                 std::thread::_State_impl<std::thread::_Invoker<std::tuple<main::{lambda()#1}> > >::_M_run() [7]
                0.00    0.87       1/1           std::thread::_Invoker<std::tuple<main::{lambda()#1}> >::operator()() [3]
-----------------------------------------------
                0.10    0.77      75/75          main::{lambda()#1}::operator()() const [6]
[8]     23.8    0.10    0.77      75         calculateRedCentroid(int, int, n*, bool*) [8]
                0.29    0.45      76/76          malloc_and_format() [9]
                0.03    0.00 23290326/23290326     isRedPixel(RGBPixel) [18]
                0.00    0.00      43/44          add(n*, int, int, double) [92]
                0.00    0.00      43/44          show(n*) [93]
-----------------------------------------------
                0.29    0.45      76/76          calculateRedCentroid(int, int, n*, bool*) [8]
[9]     20.2    0.29    0.45      76         malloc_and_format() [9]
                0.07    0.16 23340418/23340418     cv::Vec<unsigned char, 3>::Vec(cv::Vec<unsigned char, 3> const&) [11]
                0.14    0.00 69978186/69978186     cv::Vec<unsigned char, 3>::operator[](int) [14]
                0.08    0.00 23343273/23343273     cv::Vec<unsigned char, 3>& cv::Mat::at<cv::Vec<unsigned char, 3> >(int, int) [15]
                0.00    0.00      75/75          capture_frame(cv::VideoCapture&) [91]
-----------------------------------------------
                0.10    0.17       1/1           main [1]
[10]     7.4    0.10    0.17       1         SFML_out(sf::RenderWindow&, sf::Font&) [10]
                0.10    0.05 8974986/8974986     set_pixel_color(sf::RenderWindow&, int, int, int) [13]
                0.00    0.01   18303/36216       sf::String::~String() [20]
                0.01    0.00   17892/17892       std::__cxx11::to_string(double) [25]
                0.00    0.00   18228/18409       std::mutex::unlock() [23]
                0.00    0.00   17535/17535       sf::Text::~Text() [26]
                0.00    0.00   18309/18484       std::mutex::lock() [61]
-----------------------------------------------
                0.07    0.16 23340418/23340418     malloc_and_format() [9]
[11]     6.3    0.07    0.16 23340418         cv::Vec<unsigned char, 3>::Vec(cv::Vec<unsigned char, 3> const&) [11]
                0.16    0.00 23355453/23355453     cv::Matx<unsigned char, 3, 1>::Matx(unsigned char const*) [12]
-----------------------------------------------
                0.16    0.00 23355453/23355453     cv::Vec<unsigned char, 3>::Vec(cv::Vec<unsigned char, 3> const&) [11]
[12]     4.4    0.16    0.00 23355453         cv::Matx<unsigned char, 3, 1>::Matx(unsigned char const*) [12]
-----------------------------------------------
                0.10    0.05 8974986/8974986     SFML_out(sf::RenderWindow&, sf::Font&) [10]
[13]     4.2    0.10    0.05 8974986         set_pixel_color(sf::RenderWindow&, int, int, int) [13]
                0.05    0.00 8539989/8539989     sf::Vector2<float>::Vector2(float, float) [16]
-----------------------------------------------
                0.14    0.00 69978186/69978186     malloc_and_format() [9]
[14]     3.8    0.14    0.00 69978186         cv::Vec<unsigned char, 3>::operator[](int) [14]
-----------------------------------------------
                0.08    0.00 23343273/23343273     malloc_and_format() [9]
[15]     2.2    0.08    0.00 23343273         cv::Vec<unsigned char, 3>& cv::Mat::at<cv::Vec<unsigned char, 3> >(int, int) [15]
-----------------------------------------------
                0.05    0.00 8539989/8539989     set_pixel_color(sf::RenderWindow&, int, int, int) [13]
[16]     1.4    0.05    0.00 8539989         sf::Vector2<float>::Vector2(float, float) [16]
-----------------------------------------------
                                                 <spontaneous>
[17]     1.1    0.04    0.00                 _init [17]
-----------------------------------------------
                0.03    0.00 23290326/23290326     calculateRedCentroid(int, int, n*, bool*) [8]
[18]     0.8    0.03    0.00 23290326         isRedPixel(RGBPixel) [18]
-----------------------------------------------
                                                 <spontaneous>
[19]     0.5    0.02    0.00                 std::chrono::duration<long, std::ratio<1l, 1l> >::duration<int, void>(int const&) [19]
-----------------------------------------------
                0.00    0.00       1/36216       main [1]
                0.00    0.00   17912/36216       sf::Text::~Text() [26]
                0.00    0.01   18303/36216       SFML_out(sf::RenderWindow&, sf::Font&) [10]
[20]     0.3    0.00    0.01   36216         sf::String::~String() [20]
                0.00    0.01   35682/35682       std::__cxx11::basic_string<unsigned int, std::char_traits<unsigned int>, std::allocator<unsigned int> >::~basic_string() [21]
-----------------------------------------------
                0.00    0.01   35682/35682       sf::String::~String() [20]
[21]     0.3    0.00    0.01   35682         std::__cxx11::basic_string<unsigned int, std::char_traits<unsigned int>, std::allocator<unsigned int> >::~basic_string() [21]
                0.01    0.00   34773/34773       std::__cxx11::basic_string<unsigned int, std::char_traits<unsigned int>, std::allocator<unsigned int> >::_Alloc_hider::~_Alloc_hider() [22]
                0.00    0.00   35660/35660       std::__cxx11::basic_string<unsigned int, std::char_traits<unsigned int>, std::allocator<unsigned int> >::_M_dispose() [53]
-----------------------------------------------
                0.01    0.00   34773/34773       std::__cxx11::basic_string<unsigned int, std::char_traits<unsigned int>, std::allocator<unsigned int> >::~basic_string() [21]
[22]     0.3    0.01    0.00   34773         std::__cxx11::basic_string<unsigned int, std::char_traits<unsigned int>, std::allocator<unsigned int> >::_Alloc_hider::~_Alloc_hider() [22]
                0.00    0.00   34596/34596       std::__new_allocator<unsigned int>::~__new_allocator() [60]
-----------------------------------------------
                0.00    0.00       1/18409       main [1]
                0.00    0.00      77/18409       main::{lambda()#1}::operator()() const [6]
                0.00    0.00     103/18409       calculateConfidence(std::mutex&) [27]
                0.00    0.00   18228/18409       SFML_out(sf::RenderWindow&, sf::Font&) [10]
[23]     0.1    0.00    0.01   18409         std::mutex::unlock() [23]
                0.01    0.00   18006/18006       __gthread_mutex_unlock(pthread_mutex_t*) [24]
-----------------------------------------------
                0.01    0.00   18006/18006       std::mutex::unlock() [23]
[24]     0.1    0.01    0.00   18006         __gthread_mutex_unlock(pthread_mutex_t*) [24]
                0.00    0.00   18033/35974       __gthread_active_p() [41]
-----------------------------------------------
                0.01    0.00   17892/17892       SFML_out(sf::RenderWindow&, sf::Font&) [10]
[25]     0.1    0.01    0.00   17892         std::__cxx11::to_string(double) [25]
                0.00    0.00   17562/17562       std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...) [69]
-----------------------------------------------
                0.00    0.00   17535/17535       SFML_out(sf::RenderWindow&, sf::Font&) [10]
[26]     0.1    0.00    0.00   17535         sf::Text::~Text() [26]
                0.00    0.00   17912/36216       sf::String::~String() [20]
                0.00    0.00   35255/35255       sf::VertexArray::~VertexArray() [59]
                0.00    0.00   17787/53578       sf::Drawable::~Drawable() [40]
-----------------------------------------------
                0.00    0.00       1/1           void std::__invoke_impl<void, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >(std::__invoke_other, void (*&&)(std::mutex&), std::reference_wrapper<std::mutex>&&) [30]
[27]     0.0    0.00    0.00       1         calculateConfidence(std::mutex&) [27]
                0.00    0.00     103/18409       std::mutex::unlock() [23]
                0.00    0.00     607/607         __gnu_cxx::__promote_2<int, int, __gnu_cxx::__promote<int, std::__is_integer<int>::__value>::__type, __gnu_cxx::__promote<int, std::__is_integer<int>::__value>::__type>::__type std::pow<int, int>(int, int) [71]
                0.00    0.00     104/181         std::chrono::duration<long, std::ratio<1l, 1000l> >::duration<int, void>(int const&) [76]
                0.00    0.00     103/179         void std::this_thread::sleep_for<long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&) [84]
                0.00    0.00      99/18484       std::mutex::lock() [61]
-----------------------------------------------
                0.00    0.00       1/1           std::thread::_Invoker<std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> > >::operator()() [29]
[28]     0.0    0.00    0.00       1         void std::thread::_Invoker<std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> > >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) [28]
                0.00    0.00       1/1           std::__invoke_result<void (*)(std::mutex&), std::reference_wrapper<std::mutex> >::type std::__invoke<void (*)(std::mutex&), std::reference_wrapper<std::mutex> >(void (*&&)(std::mutex&), std::reference_wrapper<std::mutex>&&) [31]
                0.00    0.00       2/2           std::remove_reference<std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> >&>::type&& std::move<std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> >&>(std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> >&) [116]
                0.00    0.00       1/1           std::tuple_element<1ul, std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> > >::type&& std::get<1ul, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >(std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> >&&) [155]
                0.00    0.00       1/1           std::tuple_element<0ul, std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> > >::type&& std::get<0ul, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >(std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> >&&) [153]
-----------------------------------------------
                0.00    0.00       1/1           std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> > > >::_M_run() [32]
[29]     0.0    0.00    0.00       1         std::thread::_Invoker<std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> > >::operator()() [29]
                0.00    0.00       1/1           void std::thread::_Invoker<std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> > >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) [28]
-----------------------------------------------
                0.00    0.00       1/1           std::__invoke_result<void (*)(std::mutex&), std::reference_wrapper<std::mutex> >::type std::__invoke<void (*)(std::mutex&), std::reference_wrapper<std::mutex> >(void (*&&)(std::mutex&), std::reference_wrapper<std::mutex>&&) [31]
[30]     0.0    0.00    0.00       1         void std::__invoke_impl<void, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >(std::__invoke_other, void (*&&)(std::mutex&), std::reference_wrapper<std::mutex>&&) [30]
                0.00    0.00       1/1           calculateConfidence(std::mutex&) [27]
                0.00    0.00       1/3           void (*&&std::forward<void (*)(std::mutex&)>(std::remove_reference<void (*)(std::mutex&)>::type&))(std::mutex&) [103]
                0.00    0.00       1/10          std::reference_wrapper<std::mutex>&& std::forward<std::reference_wrapper<std::mutex> >(std::remove_reference<std::reference_wrapper<std::mutex> >::type&) [94]
                0.00    0.00       1/1           std::reference_wrapper<std::mutex>::operator std::mutex&() const [124]
-----------------------------------------------
                0.00    0.00       1/1           void std::thread::_Invoker<std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> > >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) [28]
[31]     0.0    0.00    0.00       1         std::__invoke_result<void (*)(std::mutex&), std::reference_wrapper<std::mutex> >::type std::__invoke<void (*)(std::mutex&), std::reference_wrapper<std::mutex> >(void (*&&)(std::mutex&), std::reference_wrapper<std::mutex>&&) [31]
                0.00    0.00       1/1           void std::__invoke_impl<void, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >(std::__invoke_other, void (*&&)(std::mutex&), std::reference_wrapper<std::mutex>&&) [30]
                0.00    0.00       1/10          std::reference_wrapper<std::mutex>&& std::forward<std::reference_wrapper<std::mutex> >(std::remove_reference<std::reference_wrapper<std::mutex> >::type&) [94]
                0.00    0.00       1/3           void (*&&std::forward<void (*)(std::mutex&)>(std::remove_reference<void (*)(std::mutex&)>::type&))(std::mutex&) [103]
-----------------------------------------------
                                                 <spontaneous>
[32]     0.0    0.00    0.00                 std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> > > >::_M_run() [32]
                0.00    0.00       1/1           std::thread::_Invoker<std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> > >::operator()() [29]
-----------------------------------------------
                0.00    0.00   35663/71356       std::__cxx11::basic_string<unsigned int, std::char_traits<unsigned int>, std::allocator<unsigned int> >::_M_is_local() const [51]
                0.00    0.00   35693/71356       std::__cxx11::basic_string<unsigned int, std::char_traits<unsigned int>, std::allocator<unsigned int> >::_M_destroy(unsigned long) [48]
[39]     0.0    0.00    0.00   71356         std::__cxx11::basic_string<unsigned int, std::char_traits<unsigned int>, std::allocator<unsigned int> >::_M_data() const [39]
-----------------------------------------------
                0.00    0.00   17787/53578       sf::Text::~Text() [26]
                0.00    0.00   35791/53578       sf::VertexArray::~VertexArray() [59]
[40]     0.0    0.00    0.00   53578         sf::Drawable::~Drawable() [40]
-----------------------------------------------
                0.00    0.00   17941/35974       __gthread_mutex_lock(pthread_mutex_t*) [65]
                0.00    0.00   18033/35974       __gthread_mutex_unlock(pthread_mutex_t*) [24]
[41]     0.0    0.00    0.00   35974         __gthread_active_p() [41]
-----------------------------------------------
                0.00    0.00   35961/35961       std::_Vector_base<sf::Vertex, std::allocator<sf::Vertex> >::~_Vector_base() [47]
[42]     0.0    0.00    0.00   35961         std::_Vector_base<sf::Vertex, std::allocator<sf::Vertex> >::_Vector_impl::~_Vector_impl() [42]
                0.00    0.00   35484/35484       std::__new_allocator<sf::Vertex>::~__new_allocator() [57]
-----------------------------------------------
                0.00    0.00   35932/35932       unsigned int const* std::addressof<unsigned int const>(unsigned int const&) [44]
[43]     0.0    0.00    0.00   35932         unsigned int const* std::__addressof<unsigned int const>(unsigned int const&) [43]
-----------------------------------------------
                0.00    0.00   35862/35862       std::__ptr_traits_ptr_to<unsigned int const*, unsigned int const, false>::pointer_to(unsigned int const&) [50]
[44]     0.0    0.00    0.00   35862         unsigned int const* std::addressof<unsigned int const>(unsigned int const&) [44]
                0.00    0.00   35932/35932       unsigned int const* std::__addressof<unsigned int const>(unsigned int const&) [43]
-----------------------------------------------
                0.00    0.00   35825/35825       std::__cxx11::basic_string<unsigned int, std::char_traits<unsigned int>, std::allocator<unsigned int> >::_M_destroy(unsigned long) [48]
[45]     0.0    0.00    0.00   35825         std::__cxx11::basic_string<unsigned int, std::char_traits<unsigned int>, std::allocator<unsigned int> >::_M_get_allocator() [45]
-----------------------------------------------
                0.00    0.00   35790/35790       std::_Vector_base<sf::Vertex, std::allocator<sf::Vertex> >::~_Vector_base() [47]
[46]     0.0    0.00    0.00   35790         std::_Vector_base<sf::Vertex, std::allocator<sf::Vertex> >::_M_deallocate(sf::Vertex*, unsigned long) [46]
                0.00    0.00   17764/17764       std::__new_allocator<sf::Vertex>::deallocate(sf::Vertex*, unsigned long) [66]
-----------------------------------------------
                0.00    0.00   35753/35753       std::vector<sf::Vertex, std::allocator<sf::Vertex> >::~vector() [58]
[47]     0.0    0.00    0.00   35753         std::_Vector_base<sf::Vertex, std::allocator<sf::Vertex> >::~_Vector_base() [47]
                0.00    0.00   35961/35961       std::_Vector_base<sf::Vertex, std::allocator<sf::Vertex> >::_Vector_impl::~_Vector_impl() [42]
                0.00    0.00   35790/35790       std::_Vector_base<sf::Vertex, std::allocator<sf::Vertex> >::_M_deallocate(sf::Vertex*, unsigned long) [46]
-----------------------------------------------
                0.00    0.00   35747/35747       std::__cxx11::basic_string<unsigned int, std::char_traits<unsigned int>, std::allocator<unsigned int> >::_M_dispose() [53]
[48]     0.0    0.00    0.00   35747         std::__cxx11::basic_string<unsigned int, std::char_traits<unsigned int>, std::allocator<unsigned int> >::_M_destroy(unsigned long) [48]
                0.00    0.00   35825/35825       std::__cxx11::basic_string<unsigned int, std::char_traits<unsigned int>, std::allocator<unsigned int> >::_M_get_allocator() [45]
                0.00    0.00   35693/71356       std::__cxx11::basic_string<unsigned int, std::char_traits<unsigned int>, std::allocator<unsigned int> >::_M_data() const [39]
                0.00    0.00   35661/35661       std::__new_allocator<unsigned int>::deallocate(unsigned int*, unsigned long) [52]
-----------------------------------------------
                0.00    0.00   35705/35705       std::__cxx11::basic_string<unsigned int, std::char_traits<unsigned int>, std::allocator<unsigned int> >::_M_is_local() const [51]
[49]     0.0    0.00    0.00   35705         std::__cxx11::basic_string<unsigned int, std::char_traits<unsigned int>, std::allocator<unsigned int> >::_M_local_data() const [49]
                0.00    0.00   35685/35685       std::__ptr_traits_ptr_to<unsigned int const*, unsigned int const, false>::pointer_to(unsigned int const&) [50]
-----------------------------------------------
                0.00    0.00   35685/35685       std::__cxx11::basic_string<unsigned int, std::char_traits<unsigned int>, std::allocator<unsigned int> >::_M_local_data() const [49]
[50]     0.0    0.00    0.00   35685         std::__ptr_traits_ptr_to<unsigned int const*, unsigned int const, false>::pointer_to(unsigned int const&) [50]
                0.00    0.00   35862/35862       unsigned int const* std::addressof<unsigned int const>(unsigned int const&) [44]
-----------------------------------------------
                0.00    0.00   35682/35682       std::__cxx11::basic_string<unsigned int, std::char_traits<unsigned int>, std::allocator<unsigned int> >::_M_dispose() [53]
[51]     0.0    0.00    0.00   35682         std::__cxx11::basic_string<unsigned int, std::char_traits<unsigned int>, std::allocator<unsigned int> >::_M_is_local() const [51]
                0.00    0.00   35705/35705       std::__cxx11::basic_string<unsigned int, std::char_traits<unsigned int>, std::allocator<unsigned int> >::_M_local_data() const [49]
                0.00    0.00   35663/71356       std::__cxx11::basic_string<unsigned int, std::char_traits<unsigned int>, std::allocator<unsigned int> >::_M_data() const [39]
-----------------------------------------------
                0.00    0.00   35661/35661       std::__cxx11::basic_string<unsigned int, std::char_traits<unsigned int>, std::allocator<unsigned int> >::_M_destroy(unsigned long) [48]
[52]     0.0    0.00    0.00   35661         std::__new_allocator<unsigned int>::deallocate(unsigned int*, unsigned long) [52]
-----------------------------------------------
                0.00    0.00   35660/35660       std::__cxx11::basic_string<unsigned int, std::char_traits<unsigned int>, std::allocator<unsigned int> >::~basic_string() [21]
[53]     0.0    0.00    0.00   35660         std::__cxx11::basic_string<unsigned int, std::char_traits<unsigned int>, std::allocator<unsigned int> >::_M_dispose() [53]
                0.00    0.00   35747/35747       std::__cxx11::basic_string<unsigned int, std::char_traits<unsigned int>, std::allocator<unsigned int> >::_M_destroy(unsigned long) [48]
                0.00    0.00   35682/35682       std::__cxx11::basic_string<unsigned int, std::char_traits<unsigned int>, std::allocator<unsigned int> >::_M_is_local() const [51]
-----------------------------------------------
                0.00    0.00   35626/35626       std::vector<sf::Vertex, std::allocator<sf::Vertex> >::~vector() [58]
[54]     0.0    0.00    0.00   35626         std::_Vector_base<sf::Vertex, std::allocator<sf::Vertex> >::_M_get_Tp_allocator() [54]
-----------------------------------------------
                0.00    0.00   35507/35507       void std::_Destroy<sf::Vertex*>(sf::Vertex*, sf::Vertex*) [56]
[55]     0.0    0.00    0.00   35507         void std::_Destroy_aux<true>::__destroy<sf::Vertex*>(sf::Vertex*, sf::Vertex*) [55]
-----------------------------------------------
                0.00    0.00   35485/35485       std::vector<sf::Vertex, std::allocator<sf::Vertex> >::~vector() [58]
[56]     0.0    0.00    0.00   35485         void std::_Destroy<sf::Vertex*>(sf::Vertex*, sf::Vertex*) [56]
                0.00    0.00   35507/35507       void std::_Destroy_aux<true>::__destroy<sf::Vertex*>(sf::Vertex*, sf::Vertex*) [55]
-----------------------------------------------
                0.00    0.00   35484/35484       std::_Vector_base<sf::Vertex, std::allocator<sf::Vertex> >::_Vector_impl::~_Vector_impl() [42]
[57]     0.0    0.00    0.00   35484         std::__new_allocator<sf::Vertex>::~__new_allocator() [57]
-----------------------------------------------
                0.00    0.00   35483/35483       sf::VertexArray::~VertexArray() [59]
[58]     0.0    0.00    0.00   35483         std::vector<sf::Vertex, std::allocator<sf::Vertex> >::~vector() [58]
                0.00    0.00   35753/35753       std::_Vector_base<sf::Vertex, std::allocator<sf::Vertex> >::~_Vector_base() [47]
                0.00    0.00   35626/35626       std::_Vector_base<sf::Vertex, std::allocator<sf::Vertex> >::_M_get_Tp_allocator() [54]
                0.00    0.00   35485/35485       void std::_Destroy<sf::Vertex*>(sf::Vertex*, sf::Vertex*) [56]
-----------------------------------------------
                0.00    0.00   35255/35255       sf::Text::~Text() [26]
[59]     0.0    0.00    0.00   35255         sf::VertexArray::~VertexArray() [59]
                0.00    0.00   35791/53578       sf::Drawable::~Drawable() [40]
                0.00    0.00   35483/35483       std::vector<sf::Vertex, std::allocator<sf::Vertex> >::~vector() [58]
-----------------------------------------------
                0.00    0.00   34596/34596       std::__cxx11::basic_string<unsigned int, std::char_traits<unsigned int>, std::allocator<unsigned int> >::_Alloc_hider::~_Alloc_hider() [22]
[60]     0.0    0.00    0.00   34596         std::__new_allocator<unsigned int>::~__new_allocator() [60]
-----------------------------------------------
                0.00    0.00       1/18484       main [1]
                0.00    0.00      75/18484       main::{lambda()#1}::operator()() const [6]
                0.00    0.00      99/18484       calculateConfidence(std::mutex&) [27]
                0.00    0.00   18309/18484       SFML_out(sf::RenderWindow&, sf::Font&) [10]
[61]     0.0    0.00    0.00   18484         std::mutex::lock() [61]
                0.00    0.00   17910/17910       __gthread_mutex_lock(pthread_mutex_t*) [65]
-----------------------------------------------
                0.00    0.00   18069/18069       std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...) [69]
[62]     0.0    0.00    0.00   18069         std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char*, void>(char*, char*, std::allocator<char> const&) [62]
                0.00    0.00   17941/17941       void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [64]
-----------------------------------------------
                0.00    0.00   18042/18042       void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [64]
[63]     0.0    0.00    0.00   18042         std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)::_Guard::~_Guard() [63]
-----------------------------------------------
                0.00    0.00   17941/17941       std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char*, void>(char*, char*, std::allocator<char> const&) [62]
[64]     0.0    0.00    0.00   17941         void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [64]
                0.00    0.00   18042/18042       std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)::_Guard::~_Guard() [63]
                0.00    0.00   17658/17658       std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)::_Guard::_Guard(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*) [68]
-----------------------------------------------
                0.00    0.00   17910/17910       std::mutex::lock() [61]
[65]     0.0    0.00    0.00   17910         __gthread_mutex_lock(pthread_mutex_t*) [65]
                0.00    0.00   17941/35974       __gthread_active_p() [41]
-----------------------------------------------
                0.00    0.00   17764/17764       std::_Vector_base<sf::Vertex, std::allocator<sf::Vertex> >::_M_deallocate(sf::Vertex*, unsigned long) [46]
[66]     0.0    0.00    0.00   17764         std::__new_allocator<sf::Vertex>::deallocate(sf::Vertex*, unsigned long) [66]
-----------------------------------------------
                0.00    0.00       1/17736       main [1]
                0.00    0.00   17735/17736       std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...) [69]
[67]     0.0    0.00    0.00   17736         std::__new_allocator<char>::~__new_allocator() [67]
-----------------------------------------------
                0.00    0.00   17658/17658       void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [64]
[68]     0.0    0.00    0.00   17658         std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)::_Guard::_Guard(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*) [68]
-----------------------------------------------
                0.00    0.00   17562/17562       std::__cxx11::to_string(double) [25]
[69]     0.0    0.00    0.00   17562         std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...) [69]
                0.00    0.00   18069/18069       std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char*, void>(char*, char*, std::allocator<char> const&) [62]
                0.00    0.00   17735/17736       std::__new_allocator<char>::~__new_allocator() [67]
-----------------------------------------------
                0.00    0.00     176/1251        std::chrono::duration<long, std::ratio<1l, 1000l> >::duration<long, std::ratio<1l, 1l>, void>(std::chrono::duration<long, std::ratio<1l, 1l> > const&) [75]
                0.00    0.00     180/1251        std::chrono::duration<long, std::ratio<1l, 1l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1l> >, std::ratio<1l, 1000l>, long, true, false>::__cast<long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&) [86]
                0.00    0.00     180/1251        std::chrono::duration<long, std::ratio<1l, 1000000000l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::ratio<1000000l, 1l>, long, false, true>::__cast<long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&) [81]
                0.00    0.00     355/1251        std::common_type<std::chrono::duration<long, std::ratio<1l, 1000l> >, std::chrono::duration<long, std::ratio<1l, 1l> > >::type std::chrono::operator-<long, std::ratio<1l, 1000l>, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&, std::chrono::duration<long, std::ratio<1l, 1l> > const&) [77]
                0.00    0.00     360/1251        bool std::chrono::operator< <long, std::ratio<1l, 1000l>, long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&, std::chrono::duration<long, std::ratio<1l, 1000l> > const&) [88]
[70]     0.0    0.00    0.00    1251         std::chrono::duration<long, std::ratio<1l, 1000l> >::count() const [70]
-----------------------------------------------
                0.00    0.00     607/607         calculateConfidence(std::mutex&) [27]
[71]     0.0    0.00    0.00     607         __gnu_cxx::__promote_2<int, int, __gnu_cxx::__promote<int, std::__is_integer<int>::__value>::__type, __gnu_cxx::__promote<int, std::__is_integer<int>::__value>::__type>::__type std::pow<int, int>(int, int) [71]
-----------------------------------------------
                0.00    0.00     174/534         std::chrono::duration<long, std::ratio<1l, 1000l> >::zero() [85]
                0.00    0.00     179/534         std::chrono::duration<long, std::ratio<1l, 1000l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1000l> >, std::ratio<1000l, 1l>, long, false, true>::__cast<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&) [82]
                0.00    0.00     181/534         std::common_type<std::chrono::duration<long, std::ratio<1l, 1000l> >, std::chrono::duration<long, std::ratio<1l, 1l> > >::type std::chrono::operator-<long, std::ratio<1l, 1000l>, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&, std::chrono::duration<long, std::ratio<1l, 1l> > const&) [77]
[72]     0.0    0.00    0.00     534         std::chrono::duration<long, std::ratio<1l, 1000l> >::duration<long, void>(long const&) [72]
-----------------------------------------------
                0.00    0.00     179/359         void std::this_thread::sleep_for<long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&) [84]
                0.00    0.00     180/359         std::chrono::duration<long, std::ratio<1l, 1000l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1000l> >, std::ratio<1000l, 1l>, long, false, true>::__cast<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&) [82]
[73]     0.0    0.00    0.00     359         std::chrono::duration<long, std::ratio<1l, 1l> >::count() const [73]
-----------------------------------------------
                0.00    0.00     181/181         void std::this_thread::sleep_for<long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&) [84]
[74]     0.0    0.00    0.00     181         std::enable_if<std::chrono::__is_duration<std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::value, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::duration_cast<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&) [74]
                0.00    0.00     180/180         std::chrono::duration<long, std::ratio<1l, 1000000000l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::ratio<1000000l, 1l>, long, false, true>::__cast<long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&) [81]
-----------------------------------------------
                0.00    0.00     181/181         std::common_type<std::chrono::duration<long, std::ratio<1l, 1000l> >, std::chrono::duration<long, std::ratio<1l, 1l> > >::type std::chrono::operator-<long, std::ratio<1l, 1000l>, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&, std::chrono::duration<long, std::ratio<1l, 1l> > const&) [77]
[75]     0.0    0.00    0.00     181         std::chrono::duration<long, std::ratio<1l, 1000l> >::duration<long, std::ratio<1l, 1l>, void>(std::chrono::duration<long, std::ratio<1l, 1l> > const&) [75]
                0.00    0.00     180/180         std::enable_if<std::chrono::__is_duration<std::chrono::duration<long, std::ratio<1l, 1000l> > >::value, std::chrono::duration<long, std::ratio<1l, 1000l> > >::type std::chrono::duration_cast<std::chrono::duration<long, std::ratio<1l, 1000l> >, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&) [78]
                0.00    0.00     176/1251        std::chrono::duration<long, std::ratio<1l, 1000l> >::count() const [70]
-----------------------------------------------
                0.00    0.00      77/181         main::{lambda()#1}::operator()() const [6]
                0.00    0.00     104/181         calculateConfidence(std::mutex&) [27]
[76]     0.0    0.00    0.00     181         std::chrono::duration<long, std::ratio<1l, 1000l> >::duration<int, void>(int const&) [76]
-----------------------------------------------
                0.00    0.00     181/181         void std::this_thread::sleep_for<long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&) [84]
[77]     0.0    0.00    0.00     181         std::common_type<std::chrono::duration<long, std::ratio<1l, 1000l> >, std::chrono::duration<long, std::ratio<1l, 1l> > >::type std::chrono::operator-<long, std::ratio<1l, 1000l>, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&, std::chrono::duration<long, std::ratio<1l, 1l> > const&) [77]
                0.00    0.00     355/1251        std::chrono::duration<long, std::ratio<1l, 1000l> >::count() const [70]
                0.00    0.00     181/181         std::chrono::duration<long, std::ratio<1l, 1000l> >::duration<long, std::ratio<1l, 1l>, void>(std::chrono::duration<long, std::ratio<1l, 1l> > const&) [75]
                0.00    0.00     181/534         std::chrono::duration<long, std::ratio<1l, 1000l> >::duration<long, void>(long const&) [72]
-----------------------------------------------
                0.00    0.00     180/180         std::chrono::duration<long, std::ratio<1l, 1000l> >::duration<long, std::ratio<1l, 1l>, void>(std::chrono::duration<long, std::ratio<1l, 1l> > const&) [75]
[78]     0.0    0.00    0.00     180         std::enable_if<std::chrono::__is_duration<std::chrono::duration<long, std::ratio<1l, 1000l> > >::value, std::chrono::duration<long, std::ratio<1l, 1000l> > >::type std::chrono::duration_cast<std::chrono::duration<long, std::ratio<1l, 1000l> >, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&) [78]
                0.00    0.00     180/180         std::chrono::duration<long, std::ratio<1l, 1000l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1000l> >, std::ratio<1000l, 1l>, long, false, true>::__cast<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&) [82]
-----------------------------------------------
                0.00    0.00     180/180         void std::this_thread::sleep_for<long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&) [84]
[79]     0.0    0.00    0.00     180         std::enable_if<std::chrono::__is_duration<std::chrono::duration<long, std::ratio<1l, 1l> > >::value, std::chrono::duration<long, std::ratio<1l, 1l> > >::type std::chrono::duration_cast<std::chrono::duration<long, std::ratio<1l, 1l> >, long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&) [79]
                0.00    0.00     178/178         std::chrono::duration<long, std::ratio<1l, 1l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1l> >, std::ratio<1l, 1000l>, long, true, false>::__cast<long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&) [86]
-----------------------------------------------
                0.00    0.00     180/180         std::chrono::duration<long, std::ratio<1l, 1000l> >::zero() [85]
[80]     0.0    0.00    0.00     180         std::chrono::duration_values<long>::zero() [80]
-----------------------------------------------
                0.00    0.00     180/180         std::enable_if<std::chrono::__is_duration<std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::value, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::duration_cast<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&) [74]
[81]     0.0    0.00    0.00     180         std::chrono::duration<long, std::ratio<1l, 1000000000l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::ratio<1000000l, 1l>, long, false, true>::__cast<long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&) [81]
                0.00    0.00     180/1251        std::chrono::duration<long, std::ratio<1l, 1000l> >::count() const [70]
                0.00    0.00     180/180         std::chrono::duration<long, std::ratio<1l, 1000000000l> >::duration<long, void>(long const&) [83]
-----------------------------------------------
                0.00    0.00     180/180         std::enable_if<std::chrono::__is_duration<std::chrono::duration<long, std::ratio<1l, 1000l> > >::value, std::chrono::duration<long, std::ratio<1l, 1000l> > >::type std::chrono::duration_cast<std::chrono::duration<long, std::ratio<1l, 1000l> >, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&) [78]
[82]     0.0    0.00    0.00     180         std::chrono::duration<long, std::ratio<1l, 1000l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1000l> >, std::ratio<1000l, 1l>, long, false, true>::__cast<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&) [82]
                0.00    0.00     180/359         std::chrono::duration<long, std::ratio<1l, 1l> >::count() const [73]
                0.00    0.00     179/534         std::chrono::duration<long, std::ratio<1l, 1000l> >::duration<long, void>(long const&) [72]
-----------------------------------------------
                0.00    0.00     180/180         std::chrono::duration<long, std::ratio<1l, 1000000000l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::ratio<1000000l, 1l>, long, false, true>::__cast<long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&) [81]
[83]     0.0    0.00    0.00     180         std::chrono::duration<long, std::ratio<1l, 1000000000l> >::duration<long, void>(long const&) [83]
-----------------------------------------------
                0.00    0.00      76/179         main::{lambda()#1}::operator()() const [6]
                0.00    0.00     103/179         calculateConfidence(std::mutex&) [27]
[84]     0.0    0.00    0.00     179         void std::this_thread::sleep_for<long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&) [84]
                0.00    0.00     181/181         std::common_type<std::chrono::duration<long, std::ratio<1l, 1000l> >, std::chrono::duration<long, std::ratio<1l, 1l> > >::type std::chrono::operator-<long, std::ratio<1l, 1000l>, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&, std::chrono::duration<long, std::ratio<1l, 1l> > const&) [77]
                0.00    0.00     181/181         std::enable_if<std::chrono::__is_duration<std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::value, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::duration_cast<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&) [74]
                0.00    0.00     180/180         std::enable_if<std::chrono::__is_duration<std::chrono::duration<long, std::ratio<1l, 1l> > >::value, std::chrono::duration<long, std::ratio<1l, 1l> > >::type std::chrono::duration_cast<std::chrono::duration<long, std::ratio<1l, 1l> >, long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&) [79]
                0.00    0.00     179/179         std::chrono::duration<long, std::ratio<1l, 1000l> >::zero() [85]
                0.00    0.00     179/359         std::chrono::duration<long, std::ratio<1l, 1l> >::count() const [73]
                0.00    0.00     177/177         std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [89]
                0.00    0.00     176/176         bool std::chrono::operator<=<long, std::ratio<1l, 1000l>, long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&, std::chrono::duration<long, std::ratio<1l, 1000l> > const&) [90]
-----------------------------------------------
                0.00    0.00     179/179         void std::this_thread::sleep_for<long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&) [84]
[85]     0.0    0.00    0.00     179         std::chrono::duration<long, std::ratio<1l, 1000l> >::zero() [85]
                0.00    0.00     180/180         std::chrono::duration_values<long>::zero() [80]
                0.00    0.00     174/534         std::chrono::duration<long, std::ratio<1l, 1000l> >::duration<long, void>(long const&) [72]
-----------------------------------------------
                0.00    0.00     178/178         std::enable_if<std::chrono::__is_duration<std::chrono::duration<long, std::ratio<1l, 1l> > >::value, std::chrono::duration<long, std::ratio<1l, 1l> > >::type std::chrono::duration_cast<std::chrono::duration<long, std::ratio<1l, 1l> >, long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&) [79]
[86]     0.0    0.00    0.00     178         std::chrono::duration<long, std::ratio<1l, 1l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1l> >, std::ratio<1l, 1000l>, long, true, false>::__cast<long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&) [86]
                0.00    0.00     180/1251        std::chrono::duration<long, std::ratio<1l, 1000l> >::count() const [70]
                0.00    0.00     178/178         std::chrono::duration<long, std::ratio<1l, 1l> >::duration<long, void>(long const&) [87]
-----------------------------------------------
                0.00    0.00     178/178         std::chrono::duration<long, std::ratio<1l, 1l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1l> >, std::ratio<1l, 1000l>, long, true, false>::__cast<long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&) [86]
[87]     0.0    0.00    0.00     178         std::chrono::duration<long, std::ratio<1l, 1l> >::duration<long, void>(long const&) [87]
-----------------------------------------------
                0.00    0.00     178/178         bool std::chrono::operator<=<long, std::ratio<1l, 1000l>, long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&, std::chrono::duration<long, std::ratio<1l, 1000l> > const&) [90]
[88]     0.0    0.00    0.00     178         bool std::chrono::operator< <long, std::ratio<1l, 1000l>, long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&, std::chrono::duration<long, std::ratio<1l, 1000l> > const&) [88]
                0.00    0.00     360/1251        std::chrono::duration<long, std::ratio<1l, 1000l> >::count() const [70]
-----------------------------------------------
                0.00    0.00     177/177         void std::this_thread::sleep_for<long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&) [84]
[89]     0.0    0.00    0.00     177         std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [89]
-----------------------------------------------
                0.00    0.00     176/176         void std::this_thread::sleep_for<long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&) [84]
[90]     0.0    0.00    0.00     176         bool std::chrono::operator<=<long, std::ratio<1l, 1000l>, long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&, std::chrono::duration<long, std::ratio<1l, 1000l> > const&) [90]
                0.00    0.00     178/178         bool std::chrono::operator< <long, std::ratio<1l, 1000l>, long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&, std::chrono::duration<long, std::ratio<1l, 1000l> > const&) [88]
-----------------------------------------------
                0.00    0.00      75/75          malloc_and_format() [9]
[91]     0.0    0.00    0.00      75         capture_frame(cv::VideoCapture&) [91]
-----------------------------------------------
                0.00    0.00       1/44          main [1]
                0.00    0.00      43/44          calculateRedCentroid(int, int, n*, bool*) [8]
[92]     0.0    0.00    0.00      44         add(n*, int, int, double) [92]
-----------------------------------------------
                0.00    0.00       1/44          main [1]
                0.00    0.00      43/44          calculateRedCentroid(int, int, n*, bool*) [8]
[93]     0.0    0.00    0.00      44         show(n*) [93]
-----------------------------------------------
                0.00    0.00       1/10          std::thread::thread<void (&)(std::mutex&), std::reference_wrapper<std::mutex>, void>(void (&)(std::mutex&), std::reference_wrapper<std::mutex>&&) [147]
                0.00    0.00       1/10          std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> > > >::_State_impl<void (&)(std::mutex&), std::reference_wrapper<std::mutex> >(void (&)(std::mutex&), std::reference_wrapper<std::mutex>&&) [141]
                0.00    0.00       1/10          std::thread::_Invoker<std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> > >::_Invoker<void (&)(std::mutex&), std::reference_wrapper<std::mutex> >(void (&)(std::mutex&), std::reference_wrapper<std::mutex>&&) [145]
                0.00    0.00       1/10          std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> >::tuple<void (&)(std::mutex&), std::reference_wrapper<std::mutex>, true>(void (&)(std::mutex&), std::reference_wrapper<std::mutex>&&) [139]
                0.00    0.00       1/10          std::_Tuple_impl<0ul, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >::_Tuple_impl<void (&)(std::mutex&), std::reference_wrapper<std::mutex>, void>(void (&)(std::mutex&), std::reference_wrapper<std::mutex>&&) [132]
                0.00    0.00       1/10          std::_Tuple_impl<1ul, std::reference_wrapper<std::mutex> >::_Tuple_impl<std::reference_wrapper<std::mutex> >(std::reference_wrapper<std::mutex>&&) [136]
                0.00    0.00       1/10          std::_Head_base<1ul, std::reference_wrapper<std::mutex>, false>::_Head_base<std::reference_wrapper<std::mutex> >(std::reference_wrapper<std::mutex>&&) [130]
                0.00    0.00       1/10          std::tuple_element<1ul, std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> > >::type&& std::get<1ul, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >(std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> >&&) [155]
                0.00    0.00       1/10          std::__invoke_result<void (*)(std::mutex&), std::reference_wrapper<std::mutex> >::type std::__invoke<void (*)(std::mutex&), std::reference_wrapper<std::mutex> >(void (*&&)(std::mutex&), std::reference_wrapper<std::mutex>&&) [31]
                0.00    0.00       1/10          void std::__invoke_impl<void, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >(std::__invoke_other, void (*&&)(std::mutex&), std::reference_wrapper<std::mutex>&&) [30]
[94]     0.0    0.00    0.00      10         std::reference_wrapper<std::mutex>&& std::forward<std::reference_wrapper<std::mutex> >(std::remove_reference<std::reference_wrapper<std::mutex> >::type&) [94]
-----------------------------------------------
                0.00    0.00       1/9           std::thread::thread<main::{lambda()#1}, , void>(main::{lambda()#1}&&) [148]
                0.00    0.00       1/9           std::thread::_State_impl<std::thread::_Invoker<std::tuple<main::{lambda()#1}> > >::_State_impl<main::{lambda()#1}>(main::{lambda()#1}&&) [143]
                0.00    0.00       1/9           std::thread::_Invoker<std::tuple<main::{lambda()#1}> >::_Invoker<main::{lambda()#1}>(main::{lambda()#1}&&) [146]
                0.00    0.00       1/9           std::tuple<main::{lambda()#1}>::tuple<main::{lambda()#1}, true, true>(main::{lambda()#1}&&) [140]
                0.00    0.00       1/9           std::_Tuple_impl<0ul, main::{lambda()#1}>::_Tuple_impl<main::{lambda()#1}>(main::{lambda()#1}&&) [134]
                0.00    0.00       1/9           std::_Head_base<0ul, main::{lambda()#1}, false>::_Head_base<main::{lambda()#1}>(main::{lambda()#1}&&) [128]
                0.00    0.00       1/9           std::tuple_element<0ul, std::tuple<main::{lambda()#1}> >::type&& std::get<0ul, main::{lambda()#1}>(std::tuple<main::{lambda()#1}>&&) [154]
                0.00    0.00       1/9           std::__invoke_result<main::{lambda()#1}>::type std::__invoke<main::{lambda()#1}>(main::{lambda()#1}&&) [5]
                0.00    0.00       1/9           void std::__invoke_impl<void, main::{lambda()#1}>(std::__invoke_other, main::{lambda()#1}&&) [4]
[95]     0.0    0.00    0.00       9         main::{lambda()#1}&& std::forward<main::{lambda()#1}>(std::remove_reference<main::{lambda()#1}>::type&) [95]
-----------------------------------------------
                0.00    0.00       1/5           std::thread::thread<void (&)(std::mutex&), std::reference_wrapper<std::mutex>, void>(void (&)(std::mutex&), std::reference_wrapper<std::mutex>&&) [147]
                0.00    0.00       1/5           std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> > > >::_State_impl<void (&)(std::mutex&), std::reference_wrapper<std::mutex> >(void (&)(std::mutex&), std::reference_wrapper<std::mutex>&&) [141]
                0.00    0.00       1/5           std::thread::_Invoker<std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> > >::_Invoker<void (&)(std::mutex&), std::reference_wrapper<std::mutex> >(void (&)(std::mutex&), std::reference_wrapper<std::mutex>&&) [145]
                0.00    0.00       1/5           std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> >::tuple<void (&)(std::mutex&), std::reference_wrapper<std::mutex>, true>(void (&)(std::mutex&), std::reference_wrapper<std::mutex>&&) [139]
                0.00    0.00       1/5           std::_Tuple_impl<0ul, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >::_Tuple_impl<void (&)(std::mutex&), std::reference_wrapper<std::mutex>, void>(void (&)(std::mutex&), std::reference_wrapper<std::mutex>&&) [132]
[96]     0.0    0.00    0.00       5         void (&std::forward<void (&)(std::mutex&)>(std::remove_reference<void (&)(std::mutex&)>::type&))(std::mutex&) [96]
-----------------------------------------------
                0.00    0.00       4/4           std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >::_M_head(std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >&) [98]
[97]     0.0    0.00    0.00       4         std::_Head_base<0ul, std::thread::_State*, false>::_M_head(std::_Head_base<0ul, std::thread::_State*, false>&) [97]
-----------------------------------------------
                0.00    0.00       4/4           std::thread::_State*& std::__get_helper<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >(std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >&) [101]
[98]     0.0    0.00    0.00       4         std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >::_M_head(std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >&) [98]
                0.00    0.00       4/4           std::_Head_base<0ul, std::thread::_State*, false>::_M_head(std::_Head_base<0ul, std::thread::_State*, false>&) [97]
-----------------------------------------------
                0.00    0.00       2/4           std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::~unique_ptr() [108]
                0.00    0.00       2/4           std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::__uniq_ptr_impl(std::thread::_State*) [112]
[99]     0.0    0.00    0.00       4         std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::_M_ptr() [99]
                0.00    0.00       4/4           std::tuple_element<0ul, std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> > >::type& std::get<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >(std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> >&) [102]
-----------------------------------------------
                0.00    0.00       1/4           std::thread::thread<main::{lambda()#1}, , void>(main::{lambda()#1}&&) [148]
                0.00    0.00       1/4           std::thread::thread<void (&)(std::mutex&), std::reference_wrapper<std::mutex>, void>(void (&)(std::mutex&), std::reference_wrapper<std::mutex>&&) [147]
                0.00    0.00       2/4           std::thread::joinable() const [104]
[100]    0.0    0.00    0.00       4         std::thread::id::id() [100]
-----------------------------------------------
                0.00    0.00       4/4           std::tuple_element<0ul, std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> > >::type& std::get<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >(std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> >&) [102]
[101]    0.0    0.00    0.00       4         std::thread::_State*& std::__get_helper<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >(std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >&) [101]
                0.00    0.00       4/4           std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >::_M_head(std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >&) [98]
-----------------------------------------------
                0.00    0.00       4/4           std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::_M_ptr() [99]
[102]    0.0    0.00    0.00       4         std::tuple_element<0ul, std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> > >::type& std::get<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >(std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> >&) [102]
                0.00    0.00       4/4           std::thread::_State*& std::__get_helper<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >(std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >&) [101]
-----------------------------------------------
                0.00    0.00       1/3           std::tuple_element<0ul, std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> > >::type&& std::get<0ul, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >(std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> >&&) [153]
                0.00    0.00       1/3           std::__invoke_result<void (*)(std::mutex&), std::reference_wrapper<std::mutex> >::type std::__invoke<void (*)(std::mutex&), std::reference_wrapper<std::mutex> >(void (*&&)(std::mutex&), std::reference_wrapper<std::mutex>&&) [31]
                0.00    0.00       1/3           void std::__invoke_impl<void, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >(std::__invoke_other, void (*&&)(std::mutex&), std::reference_wrapper<std::mutex>&&) [30]
[103]    0.0    0.00    0.00       3         void (*&&std::forward<void (*)(std::mutex&)>(std::remove_reference<void (*)(std::mutex&)>::type&))(std::mutex&) [103]
-----------------------------------------------
                0.00    0.00       2/2           std::thread::~thread() [115]
[104]    0.0    0.00    0.00       2         std::thread::joinable() const [104]
                0.00    0.00       2/4           std::thread::id::id() [100]
                0.00    0.00       2/2           std::operator==(std::thread::id, std::thread::id) [117]
-----------------------------------------------
                0.00    0.00       2/2           std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >::_Tuple_impl() [109]
[105]    0.0    0.00    0.00       2         std::_Head_base<0ul, std::thread::_State*, false>::_Head_base() [105]
-----------------------------------------------
                0.00    0.00       2/2           std::_Tuple_impl<1ul, std::default_delete<std::thread::_State> >::_Tuple_impl() [110]
[106]    0.0    0.00    0.00       2         std::_Head_base<1ul, std::default_delete<std::thread::_State>, true>::_Head_base() [106]
-----------------------------------------------
                0.00    0.00       1/2           std::thread::thread<main::{lambda()#1}, , void>(main::{lambda()#1}&&) [148]
                0.00    0.00       1/2           std::thread::thread<void (&)(std::mutex&), std::reference_wrapper<std::mutex>, void>(void (&)(std::mutex&), std::reference_wrapper<std::mutex>&&) [147]
[107]    0.0    0.00    0.00       2         std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::unique_ptr<std::default_delete<std::thread::_State>, void>(std::thread::_State*) [107]
                0.00    0.00       2/2           std::__uniq_ptr_data<std::thread::_State, std::default_delete<std::thread::_State>, true, true>::__uniq_ptr_impl(std::thread::_State*) [111]
-----------------------------------------------
                0.00    0.00       1/2           std::thread::thread<main::{lambda()#1}, , void>(main::{lambda()#1}&&) [148]
                0.00    0.00       1/2           std::thread::thread<void (&)(std::mutex&), std::reference_wrapper<std::mutex>, void>(void (&)(std::mutex&), std::reference_wrapper<std::mutex>&&) [147]
[108]    0.0    0.00    0.00       2         std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::~unique_ptr() [108]
                0.00    0.00       2/4           std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::_M_ptr() [99]
-----------------------------------------------
                0.00    0.00       2/2           std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> >::tuple<true, true>() [113]
[109]    0.0    0.00    0.00       2         std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >::_Tuple_impl() [109]
                0.00    0.00       2/2           std::_Head_base<0ul, std::thread::_State*, false>::_Head_base() [105]
                0.00    0.00       2/2           std::_Tuple_impl<1ul, std::default_delete<std::thread::_State> >::_Tuple_impl() [110]
-----------------------------------------------
                0.00    0.00       2/2           std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >::_Tuple_impl() [109]
[110]    0.0    0.00    0.00       2         std::_Tuple_impl<1ul, std::default_delete<std::thread::_State> >::_Tuple_impl() [110]
                0.00    0.00       2/2           std::_Head_base<1ul, std::default_delete<std::thread::_State>, true>::_Head_base() [106]
-----------------------------------------------
                0.00    0.00       2/2           std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::unique_ptr<std::default_delete<std::thread::_State>, void>(std::thread::_State*) [107]
[111]    0.0    0.00    0.00       2         std::__uniq_ptr_data<std::thread::_State, std::default_delete<std::thread::_State>, true, true>::__uniq_ptr_impl(std::thread::_State*) [111]
                0.00    0.00       2/2           std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::__uniq_ptr_impl(std::thread::_State*) [112]
-----------------------------------------------
                0.00    0.00       2/2           std::__uniq_ptr_data<std::thread::_State, std::default_delete<std::thread::_State>, true, true>::__uniq_ptr_impl(std::thread::_State*) [111]
[112]    0.0    0.00    0.00       2         std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::__uniq_ptr_impl(std::thread::_State*) [112]
                0.00    0.00       2/4           std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::_M_ptr() [99]
                0.00    0.00       2/2           std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> >::tuple<true, true>() [113]
-----------------------------------------------
                0.00    0.00       2/2           std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::__uniq_ptr_impl(std::thread::_State*) [112]
[113]    0.0    0.00    0.00       2         std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> >::tuple<true, true>() [113]
                0.00    0.00       2/2           std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >::_Tuple_impl() [109]
-----------------------------------------------
                0.00    0.00       1/2           std::thread::_State_impl<std::thread::_Invoker<std::tuple<main::{lambda()#1}> > >::_State_impl<main::{lambda()#1}>(main::{lambda()#1}&&) [143]
                0.00    0.00       1/2           std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> > > >::_State_impl<void (&)(std::mutex&), std::reference_wrapper<std::mutex> >(void (&)(std::mutex&), std::reference_wrapper<std::mutex>&&) [141]
[114]    0.0    0.00    0.00       2         std::thread::_State::_State() [114]
-----------------------------------------------
                0.00    0.00       2/2           main [1]
[115]    0.0    0.00    0.00       2         std::thread::~thread() [115]
                0.00    0.00       2/2           std::thread::joinable() const [104]
-----------------------------------------------
                0.00    0.00       2/2           void std::thread::_Invoker<std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> > >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) [28]
[116]    0.0    0.00    0.00       2         std::remove_reference<std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> >&>::type&& std::move<std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> >&>(std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> >&) [116]
-----------------------------------------------
                0.00    0.00       2/2           std::thread::joinable() const [104]
[117]    0.0    0.00    0.00       2         std::operator==(std::thread::id, std::thread::id) [117]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[118]    0.0    0.00    0.00       1         check_args(int, char**) [118]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[119]    0.0    0.00    0.00       1         keep_the_camera_open() [119]
-----------------------------------------------
                0.00    0.00       1/1           _GLOBAL__sub_I_time_mode [159]
[120]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0() [120]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[121]    0.0    0.00    0.00       1         test() [121]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[122]    0.0    0.00    0.00       1         sf::ContextSettings::ContextSettings(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool) [122]
-----------------------------------------------
                0.00    0.00       1/1           std::reference_wrapper<std::mutex>::operator std::mutex&() const [124]
[123]    0.0    0.00    0.00       1         std::reference_wrapper<std::mutex>::get() const [123]
-----------------------------------------------
                0.00    0.00       1/1           void std::__invoke_impl<void, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >(std::__invoke_other, void (*&&)(std::mutex&), std::reference_wrapper<std::mutex>&&) [30]
[124]    0.0    0.00    0.00       1         std::reference_wrapper<std::mutex>::operator std::mutex&() const [124]
                0.00    0.00       1/1           std::reference_wrapper<std::mutex>::get() const [123]
-----------------------------------------------
                0.00    0.00       1/1           std::_Tuple_impl<0ul, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >::_M_head(std::_Tuple_impl<0ul, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >&) [131]
[125]    0.0    0.00    0.00       1         std::_Head_base<0ul, void (*)(std::mutex&), false>::_M_head(std::_Head_base<0ul, void (*)(std::mutex&), false>&) [125]
-----------------------------------------------
                0.00    0.00       1/1           std::_Tuple_impl<0ul, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >::_Tuple_impl<void (&)(std::mutex&), std::reference_wrapper<std::mutex>, void>(void (&)(std::mutex&), std::reference_wrapper<std::mutex>&&) [132]
[126]    0.0    0.00    0.00       1         std::_Head_base<0ul, void (*)(std::mutex&), false>::_Head_base(void (* const&)(std::mutex&)) [126]
-----------------------------------------------
                0.00    0.00       1/1           std::_Tuple_impl<0ul, main::{lambda()#1}>::_M_head(std::_Tuple_impl<0ul, main::{lambda()#1}>&) [133]
[127]    0.0    0.00    0.00       1         std::_Head_base<0ul, main::{lambda()#1}, false>::_M_head(std::_Head_base<0ul, main::{lambda()#1}, false>&) [127]
-----------------------------------------------
                0.00    0.00       1/1           std::_Tuple_impl<0ul, main::{lambda()#1}>::_Tuple_impl<main::{lambda()#1}>(main::{lambda()#1}&&) [134]
[128]    0.0    0.00    0.00       1         std::_Head_base<0ul, main::{lambda()#1}, false>::_Head_base<main::{lambda()#1}>(main::{lambda()#1}&&) [128]
                0.00    0.00       1/9           main::{lambda()#1}&& std::forward<main::{lambda()#1}>(std::remove_reference<main::{lambda()#1}>::type&) [95]
-----------------------------------------------
                0.00    0.00       1/1           std::_Tuple_impl<1ul, std::reference_wrapper<std::mutex> >::_M_head(std::_Tuple_impl<1ul, std::reference_wrapper<std::mutex> >&) [135]
[129]    0.0    0.00    0.00       1         std::_Head_base<1ul, std::reference_wrapper<std::mutex>, false>::_M_head(std::_Head_base<1ul, std::reference_wrapper<std::mutex>, false>&) [129]
-----------------------------------------------
                0.00    0.00       1/1           std::_Tuple_impl<1ul, std::reference_wrapper<std::mutex> >::_Tuple_impl<std::reference_wrapper<std::mutex> >(std::reference_wrapper<std::mutex>&&) [136]
[130]    0.0    0.00    0.00       1         std::_Head_base<1ul, std::reference_wrapper<std::mutex>, false>::_Head_base<std::reference_wrapper<std::mutex> >(std::reference_wrapper<std::mutex>&&) [130]
                0.00    0.00       1/10          std::reference_wrapper<std::mutex>&& std::forward<std::reference_wrapper<std::mutex> >(std::remove_reference<std::reference_wrapper<std::mutex> >::type&) [94]
-----------------------------------------------
                0.00    0.00       1/1           void (*&std::__get_helper<0ul, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >(std::_Tuple_impl<0ul, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >&))(std::mutex&) [150]
[131]    0.0    0.00    0.00       1         std::_Tuple_impl<0ul, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >::_M_head(std::_Tuple_impl<0ul, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >&) [131]
                0.00    0.00       1/1           std::_Head_base<0ul, void (*)(std::mutex&), false>::_M_head(std::_Head_base<0ul, void (*)(std::mutex&), false>&) [125]
-----------------------------------------------
                0.00    0.00       1/1           std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> >::tuple<void (&)(std::mutex&), std::reference_wrapper<std::mutex>, true>(void (&)(std::mutex&), std::reference_wrapper<std::mutex>&&) [139]
[132]    0.0    0.00    0.00       1         std::_Tuple_impl<0ul, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >::_Tuple_impl<void (&)(std::mutex&), std::reference_wrapper<std::mutex>, void>(void (&)(std::mutex&), std::reference_wrapper<std::mutex>&&) [132]
                0.00    0.00       1/10          std::reference_wrapper<std::mutex>&& std::forward<std::reference_wrapper<std::mutex> >(std::remove_reference<std::reference_wrapper<std::mutex> >::type&) [94]
                0.00    0.00       1/1           std::_Tuple_impl<1ul, std::reference_wrapper<std::mutex> >::_Tuple_impl<std::reference_wrapper<std::mutex> >(std::reference_wrapper<std::mutex>&&) [136]
                0.00    0.00       1/5           void (&std::forward<void (&)(std::mutex&)>(std::remove_reference<void (&)(std::mutex&)>::type&))(std::mutex&) [96]
                0.00    0.00       1/1           std::_Head_base<0ul, void (*)(std::mutex&), false>::_Head_base(void (* const&)(std::mutex&)) [126]
-----------------------------------------------
                0.00    0.00       1/1           main::{lambda()#1}& std::__get_helper<0ul, main::{lambda()#1}>(std::_Tuple_impl<0ul, main::{lambda()#1}>&) [151]
[133]    0.0    0.00    0.00       1         std::_Tuple_impl<0ul, main::{lambda()#1}>::_M_head(std::_Tuple_impl<0ul, main::{lambda()#1}>&) [133]
                0.00    0.00       1/1           std::_Head_base<0ul, main::{lambda()#1}, false>::_M_head(std::_Head_base<0ul, main::{lambda()#1}, false>&) [127]
-----------------------------------------------
                0.00    0.00       1/1           std::tuple<main::{lambda()#1}>::tuple<main::{lambda()#1}, true, true>(main::{lambda()#1}&&) [140]
[134]    0.0    0.00    0.00       1         std::_Tuple_impl<0ul, main::{lambda()#1}>::_Tuple_impl<main::{lambda()#1}>(main::{lambda()#1}&&) [134]
                0.00    0.00       1/1           std::_Head_base<0ul, main::{lambda()#1}, false>::_Head_base<main::{lambda()#1}>(main::{lambda()#1}&&) [128]
                0.00    0.00       1/9           main::{lambda()#1}&& std::forward<main::{lambda()#1}>(std::remove_reference<main::{lambda()#1}>::type&) [95]
-----------------------------------------------
                0.00    0.00       1/1           std::reference_wrapper<std::mutex>& std::__get_helper<1ul, std::reference_wrapper<std::mutex>>(std::_Tuple_impl<1ul, std::reference_wrapper<std::mutex>>&) [152]
[135]    0.0    0.00    0.00       1         std::_Tuple_impl<1ul, std::reference_wrapper<std::mutex> >::_M_head(std::_Tuple_impl<1ul, std::reference_wrapper<std::mutex> >&) [135]
                0.00    0.00       1/1           std::_Head_base<1ul, std::reference_wrapper<std::mutex>, false>::_M_head(std::_Head_base<1ul, std::reference_wrapper<std::mutex>, false>&) [129]
-----------------------------------------------
                0.00    0.00       1/1           std::_Tuple_impl<0ul, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >::_Tuple_impl<void (&)(std::mutex&), std::reference_wrapper<std::mutex>, void>(void (&)(std::mutex&), std::reference_wrapper<std::mutex>&&) [132]
[136]    0.0    0.00    0.00       1         std::_Tuple_impl<1ul, std::reference_wrapper<std::mutex> >::_Tuple_impl<std::reference_wrapper<std::mutex> >(std::reference_wrapper<std::mutex>&&) [136]
                0.00    0.00       1/10          std::reference_wrapper<std::mutex>&& std::forward<std::reference_wrapper<std::mutex> >(std::remove_reference<std::reference_wrapper<std::mutex> >::type&) [94]
                0.00    0.00       1/1           std::_Head_base<1ul, std::reference_wrapper<std::mutex>, false>::_Head_base<std::reference_wrapper<std::mutex> >(std::reference_wrapper<std::mutex>&&) [130]
-----------------------------------------------
                0.00    0.00       1/1           std::reference_wrapper<std::mutex>::reference_wrapper<std::mutex&, void, std::mutex*>(std::mutex&) [138]
[137]    0.0    0.00    0.00       1         std::reference_wrapper<std::mutex>::_S_fun(std::mutex&) [137]
                0.00    0.00       1/1           std::mutex* std::__addressof<std::mutex>(std::mutex&) [149]
-----------------------------------------------
                0.00    0.00       1/1           std::reference_wrapper<std::mutex> std::ref<std::mutex>(std::mutex&) [156]
[138]    0.0    0.00    0.00       1         std::reference_wrapper<std::mutex>::reference_wrapper<std::mutex&, void, std::mutex*>(std::mutex&) [138]
                0.00    0.00       1/1           std::reference_wrapper<std::mutex>::_S_fun(std::mutex&) [137]
                0.00    0.00       1/1           std::mutex& std::forward<std::mutex&>(std::remove_reference<std::mutex&>::type&) [158]
-----------------------------------------------
                0.00    0.00       1/1           std::thread::_Invoker<std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> > >::_Invoker<void (&)(std::mutex&), std::reference_wrapper<std::mutex> >(void (&)(std::mutex&), std::reference_wrapper<std::mutex>&&) [145]
[139]    0.0    0.00    0.00       1         std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> >::tuple<void (&)(std::mutex&), std::reference_wrapper<std::mutex>, true>(void (&)(std::mutex&), std::reference_wrapper<std::mutex>&&) [139]
                0.00    0.00       1/10          std::reference_wrapper<std::mutex>&& std::forward<std::reference_wrapper<std::mutex> >(std::remove_reference<std::reference_wrapper<std::mutex> >::type&) [94]
                0.00    0.00       1/5           void (&std::forward<void (&)(std::mutex&)>(std::remove_reference<void (&)(std::mutex&)>::type&))(std::mutex&) [96]
                0.00    0.00       1/1           std::_Tuple_impl<0ul, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >::_Tuple_impl<void (&)(std::mutex&), std::reference_wrapper<std::mutex>, void>(void (&)(std::mutex&), std::reference_wrapper<std::mutex>&&) [132]
-----------------------------------------------
                0.00    0.00       1/1           std::thread::_Invoker<std::tuple<main::{lambda()#1}> >::_Invoker<main::{lambda()#1}>(main::{lambda()#1}&&) [146]
[140]    0.0    0.00    0.00       1         std::tuple<main::{lambda()#1}>::tuple<main::{lambda()#1}, true, true>(main::{lambda()#1}&&) [140]
                0.00    0.00       1/9           main::{lambda()#1}&& std::forward<main::{lambda()#1}>(std::remove_reference<main::{lambda()#1}>::type&) [95]
                0.00    0.00       1/1           std::_Tuple_impl<0ul, main::{lambda()#1}>::_Tuple_impl<main::{lambda()#1}>(main::{lambda()#1}&&) [134]
-----------------------------------------------
                0.00    0.00       1/1           std::thread::thread<void (&)(std::mutex&), std::reference_wrapper<std::mutex>, void>(void (&)(std::mutex&), std::reference_wrapper<std::mutex>&&) [147]
[141]    0.0    0.00    0.00       1         std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> > > >::_State_impl<void (&)(std::mutex&), std::reference_wrapper<std::mutex> >(void (&)(std::mutex&), std::reference_wrapper<std::mutex>&&) [141]
                0.00    0.00       1/2           std::thread::_State::_State() [114]
                0.00    0.00       1/10          std::reference_wrapper<std::mutex>&& std::forward<std::reference_wrapper<std::mutex> >(std::remove_reference<std::reference_wrapper<std::mutex> >::type&) [94]
                0.00    0.00       1/5           void (&std::forward<void (&)(std::mutex&)>(std::remove_reference<void (&)(std::mutex&)>::type&))(std::mutex&) [96]
                0.00    0.00       1/1           std::thread::_Invoker<std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> > >::_Invoker<void (&)(std::mutex&), std::reference_wrapper<std::mutex> >(void (&)(std::mutex&), std::reference_wrapper<std::mutex>&&) [145]
-----------------------------------------------
                0.00    0.00       1/1           std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> > > >::~_State_impl() [178]
[142]    0.0    0.00    0.00       1         std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> > > >::~_State_impl() [142]
-----------------------------------------------
                0.00    0.00       1/1           std::thread::thread<main::{lambda()#1}, , void>(main::{lambda()#1}&&) [148]
[143]    0.0    0.00    0.00       1         std::thread::_State_impl<std::thread::_Invoker<std::tuple<main::{lambda()#1}> > >::_State_impl<main::{lambda()#1}>(main::{lambda()#1}&&) [143]
                0.00    0.00       1/2           std::thread::_State::_State() [114]
                0.00    0.00       1/9           main::{lambda()#1}&& std::forward<main::{lambda()#1}>(std::remove_reference<main::{lambda()#1}>::type&) [95]
                0.00    0.00       1/1           std::thread::_Invoker<std::tuple<main::{lambda()#1}> >::_Invoker<main::{lambda()#1}>(main::{lambda()#1}&&) [146]
-----------------------------------------------
                0.00    0.00       1/1           std::thread::_State_impl<std::thread::_Invoker<std::tuple<main::{lambda()#1}> > >::~_State_impl() [179]
[144]    0.0    0.00    0.00       1         std::thread::_State_impl<std::thread::_Invoker<std::tuple<main::{lambda()#1}> > >::~_State_impl() [144]
-----------------------------------------------
                0.00    0.00       1/1           std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> > > >::_State_impl<void (&)(std::mutex&), std::reference_wrapper<std::mutex> >(void (&)(std::mutex&), std::reference_wrapper<std::mutex>&&) [141]
[145]    0.0    0.00    0.00       1         std::thread::_Invoker<std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> > >::_Invoker<void (&)(std::mutex&), std::reference_wrapper<std::mutex> >(void (&)(std::mutex&), std::reference_wrapper<std::mutex>&&) [145]
                0.00    0.00       1/10          std::reference_wrapper<std::mutex>&& std::forward<std::reference_wrapper<std::mutex> >(std::remove_reference<std::reference_wrapper<std::mutex> >::type&) [94]
                0.00    0.00       1/1           std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> >::tuple<void (&)(std::mutex&), std::reference_wrapper<std::mutex>, true>(void (&)(std::mutex&), std::reference_wrapper<std::mutex>&&) [139]
                0.00    0.00       1/5           void (&std::forward<void (&)(std::mutex&)>(std::remove_reference<void (&)(std::mutex&)>::type&))(std::mutex&) [96]
-----------------------------------------------
                0.00    0.00       1/1           std::thread::_State_impl<std::thread::_Invoker<std::tuple<main::{lambda()#1}> > >::_State_impl<main::{lambda()#1}>(main::{lambda()#1}&&) [143]
[146]    0.0    0.00    0.00       1         std::thread::_Invoker<std::tuple<main::{lambda()#1}> >::_Invoker<main::{lambda()#1}>(main::{lambda()#1}&&) [146]
                0.00    0.00       1/9           main::{lambda()#1}&& std::forward<main::{lambda()#1}>(std::remove_reference<main::{lambda()#1}>::type&) [95]
                0.00    0.00       1/1           std::tuple<main::{lambda()#1}>::tuple<main::{lambda()#1}, true, true>(main::{lambda()#1}&&) [140]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[147]    0.0    0.00    0.00       1         std::thread::thread<void (&)(std::mutex&), std::reference_wrapper<std::mutex>, void>(void (&)(std::mutex&), std::reference_wrapper<std::mutex>&&) [147]
                0.00    0.00       1/4           std::thread::id::id() [100]
                0.00    0.00       1/10          std::reference_wrapper<std::mutex>&& std::forward<std::reference_wrapper<std::mutex> >(std::remove_reference<std::reference_wrapper<std::mutex> >::type&) [94]
                0.00    0.00       1/5           void (&std::forward<void (&)(std::mutex&)>(std::remove_reference<void (&)(std::mutex&)>::type&))(std::mutex&) [96]
                0.00    0.00       1/1           std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> > > >::_State_impl<void (&)(std::mutex&), std::reference_wrapper<std::mutex> >(void (&)(std::mutex&), std::reference_wrapper<std::mutex>&&) [141]
                0.00    0.00       1/2           std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::unique_ptr<std::default_delete<std::thread::_State>, void>(std::thread::_State*) [107]
                0.00    0.00       1/2           std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::~unique_ptr() [108]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[148]    0.0    0.00    0.00       1         std::thread::thread<main::{lambda()#1}, , void>(main::{lambda()#1}&&) [148]
                0.00    0.00       1/4           std::thread::id::id() [100]
                0.00    0.00       1/9           main::{lambda()#1}&& std::forward<main::{lambda()#1}>(std::remove_reference<main::{lambda()#1}>::type&) [95]
                0.00    0.00       1/1           std::thread::_State_impl<std::thread::_Invoker<std::tuple<main::{lambda()#1}> > >::_State_impl<main::{lambda()#1}>(main::{lambda()#1}&&) [143]
                0.00    0.00       1/2           std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::unique_ptr<std::default_delete<std::thread::_State>, void>(std::thread::_State*) [107]
                0.00    0.00       1/2           std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::~unique_ptr() [108]
-----------------------------------------------
                0.00    0.00       1/1           std::reference_wrapper<std::mutex>::_S_fun(std::mutex&) [137]
[149]    0.0    0.00    0.00       1         std::mutex* std::__addressof<std::mutex>(std::mutex&) [149]
-----------------------------------------------
                0.00    0.00       1/1           std::tuple_element<0ul, std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> > >::type&& std::get<0ul, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >(std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> >&&) [153]
[150]    0.0    0.00    0.00       1         void (*&std::__get_helper<0ul, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >(std::_Tuple_impl<0ul, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >&))(std::mutex&) [150]
                0.00    0.00       1/1           std::_Tuple_impl<0ul, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >::_M_head(std::_Tuple_impl<0ul, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >&) [131]
-----------------------------------------------
                0.00    0.00       1/1           std::tuple_element<0ul, std::tuple<main::{lambda()#1}> >::type&& std::get<0ul, main::{lambda()#1}>(std::tuple<main::{lambda()#1}>&&) [154]
[151]    0.0    0.00    0.00       1         main::{lambda()#1}& std::__get_helper<0ul, main::{lambda()#1}>(std::_Tuple_impl<0ul, main::{lambda()#1}>&) [151]
                0.00    0.00       1/1           std::_Tuple_impl<0ul, main::{lambda()#1}>::_M_head(std::_Tuple_impl<0ul, main::{lambda()#1}>&) [133]
-----------------------------------------------
                0.00    0.00       1/1           std::tuple_element<1ul, std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> > >::type&& std::get<1ul, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >(std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> >&&) [155]
[152]    0.0    0.00    0.00       1         std::reference_wrapper<std::mutex>& std::__get_helper<1ul, std::reference_wrapper<std::mutex>>(std::_Tuple_impl<1ul, std::reference_wrapper<std::mutex>>&) [152]
                0.00    0.00       1/1           std::_Tuple_impl<1ul, std::reference_wrapper<std::mutex> >::_M_head(std::_Tuple_impl<1ul, std::reference_wrapper<std::mutex> >&) [135]
-----------------------------------------------
                0.00    0.00       1/1           void std::thread::_Invoker<std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> > >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) [28]
[153]    0.0    0.00    0.00       1         std::tuple_element<0ul, std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> > >::type&& std::get<0ul, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >(std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> >&&) [153]
                0.00    0.00       1/3           void (*&&std::forward<void (*)(std::mutex&)>(std::remove_reference<void (*)(std::mutex&)>::type&))(std::mutex&) [103]
                0.00    0.00       1/1           void (*&std::__get_helper<0ul, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >(std::_Tuple_impl<0ul, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >&))(std::mutex&) [150]
-----------------------------------------------
                0.00    0.00       1/1           void std::thread::_Invoker<std::tuple<main::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) [2]
[154]    0.0    0.00    0.00       1         std::tuple_element<0ul, std::tuple<main::{lambda()#1}> >::type&& std::get<0ul, main::{lambda()#1}>(std::tuple<main::{lambda()#1}>&&) [154]
                0.00    0.00       1/9           main::{lambda()#1}&& std::forward<main::{lambda()#1}>(std::remove_reference<main::{lambda()#1}>::type&) [95]
                0.00    0.00       1/1           main::{lambda()#1}& std::__get_helper<0ul, main::{lambda()#1}>(std::_Tuple_impl<0ul, main::{lambda()#1}>&) [151]
-----------------------------------------------
                0.00    0.00       1/1           void std::thread::_Invoker<std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> > >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) [28]
[155]    0.0    0.00    0.00       1         std::tuple_element<1ul, std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> > >::type&& std::get<1ul, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >(std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> >&&) [155]
                0.00    0.00       1/1           std::reference_wrapper<std::mutex>& std::__get_helper<1ul, std::reference_wrapper<std::mutex>>(std::_Tuple_impl<1ul, std::reference_wrapper<std::mutex>>&) [152]
                0.00    0.00       1/10          std::reference_wrapper<std::mutex>&& std::forward<std::reference_wrapper<std::mutex> >(std::remove_reference<std::reference_wrapper<std::mutex> >::type&) [94]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[156]    0.0    0.00    0.00       1         std::reference_wrapper<std::mutex> std::ref<std::mutex>(std::mutex&) [156]
                0.00    0.00       1/1           std::reference_wrapper<std::mutex>::reference_wrapper<std::mutex&, void, std::mutex*>(std::mutex&) [138]
-----------------------------------------------
                0.00    0.00       1/1           void std::thread::_Invoker<std::tuple<main::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) [2]
[157]    0.0    0.00    0.00       1         std::remove_reference<std::tuple<main::{lambda()#1}>&>::type&& std::move<std::tuple<main::{lambda()#1}>&>(std::tuple<main::{lambda()#1}>&) [157]
-----------------------------------------------
                0.00    0.00       1/1           std::reference_wrapper<std::mutex>::reference_wrapper<std::mutex&, void, std::mutex*>(std::mutex&) [138]
[158]    0.0    0.00    0.00       1         std::mutex& std::forward<std::mutex&>(std::remove_reference<std::mutex&>::type&) [158]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2023 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

 [118] check_args(int, char**) [109] std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >::_Tuple_impl() [114] std::thread::_State::_State()
  [18] isRedPixel(RGBPixel)  [133] std::_Tuple_impl<0ul, main::{lambda()#1}>::_M_head(std::_Tuple_impl<0ul, main::{lambda()#1}>&) [28] void std::thread::_Invoker<std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> > >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>)
  [91] capture_frame(cv::VideoCapture&) [134] std::_Tuple_impl<0ul, main::{lambda()#1}>::_Tuple_impl<main::{lambda()#1}>(main::{lambda()#1}&&) [145] std::thread::_Invoker<std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> > >::_Invoker<void (&)(std::mutex&), std::reference_wrapper<std::mutex> >(void (&)(std::mutex&), std::reference_wrapper<std::mutex>&&)
  [13] set_pixel_color(sf::RenderWindow&, int, int, int) [110] std::_Tuple_impl<1ul, std::default_delete<std::thread::_State> >::_Tuple_impl() [29] std::thread::_Invoker<std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> > >::operator()()
   [9] malloc_and_format()   [135] std::_Tuple_impl<1ul, std::reference_wrapper<std::mutex> >::_M_head(std::_Tuple_impl<1ul, std::reference_wrapper<std::mutex> >&) [2] void std::thread::_Invoker<std::tuple<main::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>)
  [27] calculateConfidence(std::mutex&) [136] std::_Tuple_impl<1ul, std::reference_wrapper<std::mutex> >::_Tuple_impl<std::reference_wrapper<std::mutex> >(std::reference_wrapper<std::mutex>&&) [146] std::thread::_Invoker<std::tuple<main::{lambda()#1}> >::_Invoker<main::{lambda()#1}>(main::{lambda()#1}&&)
   [8] calculateRedCentroid(int, int, n*, bool*) [84] void std::this_thread::sleep_for<long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&) [3] std::thread::_Invoker<std::tuple<main::{lambda()#1}> >::operator()()
 [119] keep_the_camera_open() [55] void std::_Destroy_aux<true>::__destroy<sf::Vertex*>(sf::Vertex*, sf::Vertex*) [147] std::thread::thread<void (&)(std::mutex&), std::reference_wrapper<std::mutex>, void>(void (&)(std::mutex&), std::reference_wrapper<std::mutex>&&)
  [92] add(n*, int, int, double) [42] std::_Vector_base<sf::Vertex, std::allocator<sf::Vertex> >::_Vector_impl::~_Vector_impl() [148] std::thread::thread<main::{lambda()#1}, , void>(main::{lambda()#1}&&)
 [120] __static_initialization_and_destruction_0() [46] std::_Vector_base<sf::Vertex, std::allocator<sf::Vertex> >::_M_deallocate(sf::Vertex*, unsigned long) [115] std::thread::~thread()
  [93] show(n*)               [54] std::_Vector_base<sf::Vertex, std::allocator<sf::Vertex> >::_M_get_Tp_allocator() [58] std::vector<sf::Vertex, std::allocator<sf::Vertex> >::~vector()
 [121] test()                 [47] std::_Vector_base<sf::Vertex, std::allocator<sf::Vertex> >::~_Vector_base() [64] void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)
  [10] SFML_out(sf::RenderWindow&, sf::Font&) [66] std::__new_allocator<sf::Vertex>::deallocate(sf::Vertex*, unsigned long) [62] std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char*, void>(char*, char*, std::allocator<char> const&)
  [41] __gthread_active_p()   [57] std::__new_allocator<sf::Vertex>::~__new_allocator() [48] std::__cxx11::basic_string<unsigned int, std::char_traits<unsigned int>, std::allocator<unsigned int> >::_M_destroy(unsigned long)
  [65] __gthread_mutex_lock(pthread_mutex_t*) [67] std::__new_allocator<char>::~__new_allocator() [53] std::__cxx11::basic_string<unsigned int, std::char_traits<unsigned int>, std::allocator<unsigned int> >::_M_dispose()
  [24] __gthread_mutex_unlock(pthread_mutex_t*) [52] std::__new_allocator<unsigned int>::deallocate(unsigned int*, unsigned long) [22] std::__cxx11::basic_string<unsigned int, std::char_traits<unsigned int>, std::allocator<unsigned int> >::_Alloc_hider::~_Alloc_hider()
  [15] cv::Vec<unsigned char, 3>& cv::Mat::at<cv::Vec<unsigned char, 3> >(int, int) [60] std::__new_allocator<unsigned int>::~__new_allocator() [45] std::__cxx11::basic_string<unsigned int, std::char_traits<unsigned int>, std::allocator<unsigned int> >::_M_get_allocator()
  [11] cv::Vec<unsigned char, 3>::Vec(cv::Vec<unsigned char, 3> const&) [111] std::__uniq_ptr_data<std::thread::_State, std::default_delete<std::thread::_State>, true, true>::__uniq_ptr_impl(std::thread::_State*) [21] std::__cxx11::basic_string<unsigned int, std::char_traits<unsigned int>, std::allocator<unsigned int> >::~basic_string()
  [14] cv::Vec<unsigned char, 3>::operator[](int) [99] std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::_M_ptr() [25] std::__cxx11::to_string(double)
  [12] cv::Matx<unsigned char, 3, 1>::Matx(unsigned char const*) [112] std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::__uniq_ptr_impl(std::thread::_State*) [43] unsigned int const* std::__addressof<unsigned int const>(unsigned int const&)
  [59] sf::VertexArray::~VertexArray() [137] std::reference_wrapper<std::mutex>::_S_fun(std::mutex&) [149] std::mutex* std::__addressof<std::mutex>(std::mutex&)
 [122] sf::ContextSettings::ContextSettings(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool) [138] std::reference_wrapper<std::mutex>::reference_wrapper<std::mutex&, void, std::mutex*>(std::mutex&) [150] void (*&std::__get_helper<0ul, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >(std::_Tuple_impl<0ul, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >&))(std::mutex&)
  [26] sf::Text::~Text()      [50] std::__ptr_traits_ptr_to<unsigned int const*, unsigned int const, false>::pointer_to(unsigned int const&) [101] std::thread::_State*& std::__get_helper<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >(std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >&)
  [20] sf::String::~String()  [61] std::mutex::lock()    [151] main::{lambda()#1}& std::__get_helper<0ul, main::{lambda()#1}>(std::_Tuple_impl<0ul, main::{lambda()#1}>&)
  [16] sf::Vector2<float>::Vector2(float, float) [23] std::mutex::unlock() [152] std::reference_wrapper<std::mutex>& std::__get_helper<1ul, std::reference_wrapper<std::mutex>>(std::_Tuple_impl<1ul, std::reference_wrapper<std::mutex>>&)
  [40] sf::Drawable::~Drawable() [139] std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> >::tuple<void (&)(std::mutex&), std::reference_wrapper<std::mutex>, true>(void (&)(std::mutex&), std::reference_wrapper<std::mutex>&&) [30] void std::__invoke_impl<void, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >(std::__invoke_other, void (*&&)(std::mutex&), std::reference_wrapper<std::mutex>&&)
  [69] std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...) [113] std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> >::tuple<true, true>() [4] void std::__invoke_impl<void, main::{lambda()#1}>(std::__invoke_other, main::{lambda()#1}&&)
 [123] std::reference_wrapper<std::mutex>::get() const [140] std::tuple<main::{lambda()#1}>::tuple<main::{lambda()#1}, true, true>(main::{lambda()#1}&&) [153] std::tuple_element<0ul, std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> > >::type&& std::get<0ul, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >(std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> >&&)
 [124] std::reference_wrapper<std::mutex>::operator std::mutex&() const [74] std::enable_if<std::chrono::__is_duration<std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::value, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::duration_cast<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&) [102] std::tuple_element<0ul, std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> > >::type& std::get<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >(std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> >&)
  [89] std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [78] std::enable_if<std::chrono::__is_duration<std::chrono::duration<long, std::ratio<1l, 1000l> > >::value, std::chrono::duration<long, std::ratio<1l, 1000l> > >::type std::chrono::duration_cast<std::chrono::duration<long, std::ratio<1l, 1000l> >, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&) [154] std::tuple_element<0ul, std::tuple<main::{lambda()#1}> >::type&& std::get<0ul, main::{lambda()#1}>(std::tuple<main::{lambda()#1}>&&)
  [70] std::chrono::duration<long, std::ratio<1l, 1000l> >::count() const [79] std::enable_if<std::chrono::__is_duration<std::chrono::duration<long, std::ratio<1l, 1l> > >::value, std::chrono::duration<long, std::ratio<1l, 1l> > >::type std::chrono::duration_cast<std::chrono::duration<long, std::ratio<1l, 1l> >, long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&) [155] std::tuple_element<1ul, std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> > >::type&& std::get<1ul, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >(std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> >&&)
  [73] std::chrono::duration<long, std::ratio<1l, 1l> >::count() const [80] std::chrono::duration_values<long>::zero() [71] __gnu_cxx::__promote_2<int, int, __gnu_cxx::__promote<int, std::__is_integer<int>::__value>::__type, __gnu_cxx::__promote<int, std::__is_integer<int>::__value>::__type>::__type std::pow<int, int>(int, int)
 [104] std::thread::joinable() const [81] std::chrono::duration<long, std::ratio<1l, 1000000000l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::ratio<1000000l, 1l>, long, false, true>::__cast<long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&) [156] std::reference_wrapper<std::mutex> std::ref<std::mutex>(std::mutex&)
  [51] std::__cxx11::basic_string<unsigned int, std::char_traits<unsigned int>, std::allocator<unsigned int> >::_M_is_local() const [82] std::chrono::duration<long, std::ratio<1l, 1000l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1000l> >, std::ratio<1000l, 1l>, long, false, true>::__cast<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&) [116] std::remove_reference<std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> >&>::type&& std::move<std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> >&>(std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> >&)
  [49] std::__cxx11::basic_string<unsigned int, std::char_traits<unsigned int>, std::allocator<unsigned int> >::_M_local_data() const [86] std::chrono::duration<long, std::ratio<1l, 1l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1l> >, std::ratio<1l, 1000l>, long, true, false>::__cast<long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&) [157] std::remove_reference<std::tuple<main::{lambda()#1}>&>::type&& std::move<std::tuple<main::{lambda()#1}>&>(std::tuple<main::{lambda()#1}>&)
  [39] std::__cxx11::basic_string<unsigned int, std::char_traits<unsigned int>, std::allocator<unsigned int> >::_M_data() const [83] std::chrono::duration<long, std::ratio<1l, 1000000000l> >::duration<long, void>(long const&) [103] void (*&&std::forward<void (*)(std::mutex&)>(std::remove_reference<void (*)(std::mutex&)>::type&))(std::mutex&)
 [125] std::_Head_base<0ul, void (*)(std::mutex&), false>::_M_head(std::_Head_base<0ul, void (*)(std::mutex&), false>&) [85] std::chrono::duration<long, std::ratio<1l, 1000l> >::zero() [96] void (&std::forward<void (&)(std::mutex&)>(std::remove_reference<void (&)(std::mutex&)>::type&))(std::mutex&)
 [126] std::_Head_base<0ul, void (*)(std::mutex&), false>::_Head_base(void (* const&)(std::mutex&)) [75] std::chrono::duration<long, std::ratio<1l, 1000l> >::duration<long, std::ratio<1l, 1l>, void>(std::chrono::duration<long, std::ratio<1l, 1l> > const&) [158] std::mutex& std::forward<std::mutex&>(std::remove_reference<std::mutex&>::type&)
  [97] std::_Head_base<0ul, std::thread::_State*, false>::_M_head(std::_Head_base<0ul, std::thread::_State*, false>&) [72] std::chrono::duration<long, std::ratio<1l, 1000l> >::duration<long, void>(long const&) [94] std::reference_wrapper<std::mutex>&& std::forward<std::reference_wrapper<std::mutex> >(std::remove_reference<std::reference_wrapper<std::mutex> >::type&)
 [105] std::_Head_base<0ul, std::thread::_State*, false>::_Head_base() [76] std::chrono::duration<long, std::ratio<1l, 1000l> >::duration<int, void>(int const&) [95] main::{lambda()#1}&& std::forward<main::{lambda()#1}>(std::remove_reference<main::{lambda()#1}>::type&)
 [127] std::_Head_base<0ul, main::{lambda()#1}, false>::_M_head(std::_Head_base<0ul, main::{lambda()#1}, false>&) [19] std::chrono::duration<long, std::ratio<1l, 1l> >::duration<int, void>(int const&) [56] void std::_Destroy<sf::Vertex*>(sf::Vertex*, sf::Vertex*)
 [128] std::_Head_base<0ul, main::{lambda()#1}, false>::_Head_base<main::{lambda()#1}>(main::{lambda()#1}&&) [87] std::chrono::duration<long, std::ratio<1l, 1l> >::duration<long, void>(long const&) [31] std::__invoke_result<void (*)(std::mutex&), std::reference_wrapper<std::mutex> >::type std::__invoke<void (*)(std::mutex&), std::reference_wrapper<std::mutex> >(void (*&&)(std::mutex&), std::reference_wrapper<std::mutex>&&)
 [106] std::_Head_base<1ul, std::default_delete<std::thread::_State>, true>::_Head_base() [90] bool std::chrono::operator<=<long, std::ratio<1l, 1000l>, long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&, std::chrono::duration<long, std::ratio<1l, 1000l> > const&) [5] std::__invoke_result<main::{lambda()#1}>::type std::__invoke<main::{lambda()#1}>(main::{lambda()#1}&&)
 [129] std::_Head_base<1ul, std::reference_wrapper<std::mutex>, false>::_M_head(std::_Head_base<1ul, std::reference_wrapper<std::mutex>, false>&) [88] bool std::chrono::operator< <long, std::ratio<1l, 1000l>, long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&, std::chrono::duration<long, std::ratio<1l, 1000l> > const&) [44] unsigned int const* std::addressof<unsigned int const>(unsigned int const&)
 [130] std::_Head_base<1ul, std::reference_wrapper<std::mutex>, false>::_Head_base<std::reference_wrapper<std::mutex> >(std::reference_wrapper<std::mutex>&&) [77] std::common_type<std::chrono::duration<long, std::ratio<1l, 1000l> >, std::chrono::duration<long, std::ratio<1l, 1l> > >::type std::chrono::operator-<long, std::ratio<1l, 1000l>, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&, std::chrono::duration<long, std::ratio<1l, 1l> > const&) [117] std::operator==(std::thread::id, std::thread::id)
 [107] std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::unique_ptr<std::default_delete<std::thread::_State>, void>(std::thread::_State*) [141] std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> > > >::_State_impl<void (&)(std::mutex&), std::reference_wrapper<std::mutex> >(void (&)(std::mutex&), std::reference_wrapper<std::mutex>&&) [6] main::{lambda()#1}::operator()() const
 [108] std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::~unique_ptr() [142] std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(std::mutex&), std::reference_wrapper<std::mutex> > > >::~_State_impl() [68] std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)::_Guard::_Guard(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)
 [131] std::_Tuple_impl<0ul, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >::_M_head(std::_Tuple_impl<0ul, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >&) [143] std::thread::_State_impl<std::thread::_Invoker<std::tuple<main::{lambda()#1}> > >::_State_impl<main::{lambda()#1}>(main::{lambda()#1}&&) [63] std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)::_Guard::~_Guard()
 [132] std::_Tuple_impl<0ul, void (*)(std::mutex&), std::reference_wrapper<std::mutex> >::_Tuple_impl<void (&)(std::mutex&), std::reference_wrapper<std::mutex>, void>(void (&)(std::mutex&), std::reference_wrapper<std::mutex>&&) [144] std::thread::_State_impl<std::thread::_Invoker<std::tuple<main::{lambda()#1}> > >::~_State_impl() [17] _init
  [98] std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >::_M_head(std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >&) [100] std::thread::id::id() [1] main
